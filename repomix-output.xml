This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
eslint.config.js
index.html
package.json
postcss.config.js
src/App.tsx
src/components/Dashboard/OverviewStats.tsx
src/components/Dashboard/WebsiteCard.tsx
src/components/Home/BentoFeatures.tsx
src/components/Home/CTA.tsx
src/components/Home/InteractiveHeroDemo.tsx
src/components/Home/ReviewCard.tsx
src/components/Layout/Footer.tsx
src/components/Layout/Header.tsx
src/components/Layout/Layout.tsx
src/components/Layout/Sidebar.tsx
src/components/magicui/bento-grid.tsx
src/components/magicui/box-reveal.tsx
src/components/magicui/hypertext.tsx
src/components/magicui/marquee.tsx
src/components/magicui/pointer.tsx
src/components/UI/Button.tsx
src/components/UI/Card.tsx
src/components/UI/Logo.tsx
src/components/UI/Modal.tsx
src/components/UI/Toast.tsx
src/contexts/ThemeContext.tsx
src/contexts/WebsiteContext.tsx
src/data/mockData.ts
src/index.css
src/lib/utils.ts
src/main.tsx
src/pages/Builder.tsx
src/pages/Dashboard.tsx
src/pages/Home.tsx
src/pages/Templates.tsx
src/vite-env.d.ts
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.env
</file>

<file path="eslint.config.js">
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Small Business Website Platform</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
</file>

<file path="src/components/Dashboard/OverviewStats.tsx">
// src/components/Dashboard/OverviewStats.tsx

import React from 'react';
import { motion } from 'framer-motion';
import { BarChart3, Globe, TrendingUp } from 'lucide-react';
import Card from '../UI/Card';
import { Website } from '../../contexts/WebsiteContext';

// Reusable MiniBarChart component
const MiniBarChart: React.FC<{ data: number[] }> = ({ data }) => {
  const max = Math.max(...data);
  return (
    <div className="flex items-end space-x-1 h-12">
      {data.map((value, i) => (
        <motion.div
          key={i}
          className="w-full bg-teal-500 rounded-sm"
          initial={{ height: 0 }}
          animate={{ height: `${(value / max) * 100}%` }}
          transition={{ duration: 0.5, delay: i * 0.05 }}
        />
      ))}
    </div>
  );
};

const OverviewStats: React.FC<{ websites: Website[] }> = ({ websites }) => {
    const totalVisits = websites.reduce((sum, site) => sum + site.visits, 0);
    const liveWebsites = websites.filter(site => site.status === 'live').length;
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const avgGrowth = websites.length > 0 ? websites.reduce((sum, site) => sum + site.growth, 0) / websites.length : 0;
    const weeklyVisitsData = [120, 180, 150, 220, 200, 280, 300]; // Dummy data for chart

  return (
    <Card className="p-5">
      <h2 className="text-lg font-semibold text-white mb-4">Account Overview</h2>
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <div className="flex items-center space-x-3">
            <div className="p-2 rounded-lg bg-blue-500/10 text-blue-400"><Globe className="h-6 w-6" /></div>
            <div>
                <p className="text-sm text-muted-foreground">Websites</p>
                <p className="text-xl font-bold text-white">{websites.length}</p>
            </div>
        </div>
        <div className="flex items-center space-x-3">
            <div className="p-2 rounded-lg bg-green-500/10 text-green-400"><TrendingUp className="h-6 w-6" /></div>
            <div>
                <p className="text-sm text-muted-foreground">Live</p>
                <p className="text-xl font-bold text-white">{liveWebsites}</p>
            </div>
        </div>
        <div className="col-span-2 flex items-center space-x-3">
            <div className="p-2 rounded-lg bg-teal-500/10 text-teal-400"><BarChart3 className="h-6 w-6" /></div>
            <div className="flex-1">
                <p className="text-sm text-muted-foreground">Total Visits (7d)</p>
                <p className="text-xl font-bold text-white">{totalVisits.toLocaleString()}</p>
            </div>
            <div className="w-1/2">
                <MiniBarChart data={weeklyVisitsData} />
            </div>
        </div>
      </div>
    </Card>
  );
};

export default OverviewStats;
</file>

<file path="src/components/Dashboard/WebsiteCard.tsx">
// src/components/Dashboard/WebsiteCard.tsx

import React from 'react';
import { motion } from 'framer-motion';
import { Globe, BarChart3, Clock, TrendingUp, TrendingDown, MoreHorizontal, Edit, Settings, Trash2 } from 'lucide-react';
import { Website } from '../../contexts/WebsiteContext';

interface WebsiteCardProps {
  website: Website;
  onDelete: (id: string, name: string) => void;
}

const statusStyles = {
    live: { dot: 'bg-green-400', text: 'text-green-400' },
    draft: { dot: 'bg-yellow-400', text: 'text-yellow-400' },
    maintenance: { dot: 'bg-orange-400', text: 'text-orange-400' },
};

const WebsiteCard: React.FC<WebsiteCardProps> = ({ website, onDelete }) => {
  const [menuOpen, setMenuOpen] = React.useState(false);
  const status = statusStyles[website.status];
  const GrowthIcon = website.growth >= 0 ? TrendingUp : TrendingDown;
  const growthColor = website.growth >= 0 ? 'text-green-400' : 'text-red-400';

  return (
    <motion.div 
        className="bg-card/50 border border-border rounded-lg flex space-x-4 p-4 transition-all duration-300 hover:bg-card hover:shadow-lg hover:-translate-y-1"
        layout
    >
        <img src={website.thumbnail} alt={website.name} className="w-24 h-24 object-cover rounded-md flex-shrink-0" />
        <div className="flex-1 flex flex-col justify-between">
            <div>
                <div className="flex justify-between items-start">
                    <h3 className="font-bold text-white text-md mb-1">{website.name}</h3>
                    <div className="relative">
                        <button onClick={() => setMenuOpen(!menuOpen)} onBlur={() => setTimeout(() => setMenuOpen(false), 200)} className="p-1 rounded-full text-muted-foreground hover:bg-secondary hover:text-foreground">
                            <MoreHorizontal className="h-5 w-5" />
                        </button>
                        {menuOpen && (
                            <motion.div
                                className="absolute right-0 mt-2 w-40 bg-secondary border border-border rounded-md shadow-xl z-10 overflow-hidden"
                                initial={{ opacity: 0, y: -10 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0 }}
                            >
                                <a href="#" className="flex items-center w-full px-3 py-2 text-sm text-foreground hover:bg-primary/10"><Edit className="h-4 w-4 mr-2" /> Edit Site</a>
                                <a href="#" className="flex items-center w-full px-3 py-2 text-sm text-foreground hover:bg-primary/10"><Settings className="h-4 w-4 mr-2" /> Settings</a>
                                <button onClick={() => onDelete(website.id, website.name)} className="flex items-center w-full px-3 py-2 text-sm text-red-400 hover:bg-red-500/10"><Trash2 className="h-4 w-4 mr-2" /> Delete</button>
                            </motion.div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2 text-xs text-muted-foreground">
                    <div className={`w-2 h-2 rounded-full ${status.dot}`}></div>
                    <span className={status.text}>{website.status.charAt(0).toUpperCase() + website.status.slice(1)}</span>
                    <span className="text-gray-600">•</span>
                    <a href={`//${website.url}`} target="_blank" rel="noopener noreferrer" className="hover:text-primary flex items-center"><Globe className="h-3 w-3 mr-1"/>{website.url}</a>
                </div>
            </div>
            <div className="flex items-center justify-between text-xs text-muted-foreground mt-2">
                <div className="flex items-center" title="Visits"><BarChart3 className="h-3 w-3 mr-1" /> {website.visits.toLocaleString()}</div>
                <div className="flex items-center" title="Growth"><GrowthIcon className={`h-3 w-3 mr-1 ${growthColor}`} /> {website.growth}%</div>
                <div className="flex items-center" title="Last Updated"><Clock className="h-3 w-3 mr-1" /> {website.lastUpdated}</div>
            </div>
        </div>
    </motion.div>
  );
};

export default WebsiteCard;
</file>

<file path="src/components/Home/BentoFeatures.tsx">
// src/components/Home/BentoFeatures.tsx

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { CheckCircle, Globe, Layout, Sparkles } from 'lucide-react'; // Using icons you have

// For the "AI Builder" card -> Replaces AnimatedBeam
export const BuilderAnimation = () => {
    const items = [
        { Icon: Layout, text: "Generating Layout" },
        { Icon: Sparkles, text: "Choosing Colors" },
        { Icon: Globe, text: "Deploying Globally" },
        { Icon: CheckCircle, text: "Website Ready!" },
    ];

    const [index, setIndex] = useState(0);

    useEffect(() => {
        const interval = setInterval(() => {
            setIndex((prevIndex) => (prevIndex + 1) % items.length);
        }, 2500);
        return () => clearInterval(interval);
    }, []);

    const item = items[index];

    return (
        <div className="absolute inset-0 flex items-center justify-center p-4 bg-black/10 transition-all duration-300 ease-out [mask-image:linear-gradient(to_top,transparent_10%,#000_100%)] group-hover:scale-105">
            <AnimatePresence mode="wait">
                <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -20 }}
                    transition={{ duration: 0.5 }}
                    className="flex flex-col items-center text-center text-gray-400"
                >
                    <item.Icon className={`w-16 h-16 mb-4 ${item.text === 'Website Ready!' ? 'text-green-400' : 'text-indigo-400'}`} />
                    <p className="font-mono text-sm">{item.text}</p>
                </motion.div>
            </AnimatePresence>
        </div>
    );
};


// For the "Customization" card -> Cleaned up
export const SparklesAnimation = () => (
    <div className="absolute inset-0 flex items-center justify-center -z-10 opacity-50 [mask-image:radial-gradient(ellipse_at_center,white_20%,transparent_70%)]">
        <div className="grid grid-cols-4 gap-2">
            {['#6366f1', '#38bdf8', '#34d399', '#f59e0b', '#a855f7', '#ec4899', '#ef4444', '#f9fafb'].map((color, i) => (
                <motion.div
                    key={color}
                    className="w-10 h-10 rounded-full"
                    style={{ backgroundColor: color }}
                    initial={{ opacity: 0, scale: 0.5 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ delay: i * 0.1, duration: 0.5, ease: 'easeOut' }}
                />
            ))}
        </div>
    </div>
);


// For the "Analytics" card -> Cleaned up
export const ChartAnimation = () => {
    const data = [12, 19, 3, 5, 2, 3, 9, 15, 6];
    const max = Math.max(...data);
    return (
        <div className="absolute bottom-0 left-0 right-0 h-1/2 flex items-end justify-center space-x-2 p-4 [mask-image:linear-gradient(to_top,white_50%,transparent_100%)]">
            {data.map((value, i) => (
                <motion.div
                    key={i}
                    className="w-full bg-teal-500 rounded-t-sm"
                    initial={{ height: 0 }}
                    animate={{ height: `${(value / max) * 100}%` }}
                    transition={{ duration: 0.5, delay: i * 0.1 + 0.5, type: 'spring', stiffness: 150 }}
                />
            ))}
        </div>
    );
};
</file>

<file path="src/components/Home/CTA.tsx">
import React, { useState, useEffect } from 'react';
import { ArrowRight, Code, Zap, Globe, Rocket } from 'lucide-react';

const UniqueCTA = () => {
  const [isVisible, setIsVisible] = useState(false);
  const [activeStep, setActiveStep] = useState(0);

  useEffect(() => {
    const timer = setTimeout(() => setIsVisible(true), 200);
    const stepTimer = setInterval(() => {
      setActiveStep(prev => (prev + 1) % 3);
    }, 2000);
    
    return () => {
      clearTimeout(timer);
      clearInterval(stepTimer);
    };
  }, []);

  const handleGenerateWebsite = () => {
    console.log('Starting website generation...');
  };

  const steps = [
    { icon: Code, text: "Pick Your Template", color: "text-blue-400" },
    { icon: Zap, text: "AI builds instantly", color: "text-yellow-400" },
    { icon: Globe, text: "Launch & scale", color: "text-green-400" }
  ];

  return (
    <section className="py-16 bg-black relative overflow-hidden">
      {/* Dynamic background elements */}
      <div className="absolute inset-0">
        <div className="absolute top-10 left-1/4 w-2 h-2 bg-indigo-400 rounded-full animate-ping"></div>
        <div className="absolute bottom-20 right-1/3 w-1 h-1 bg-teal-400 rounded-full animate-pulse"></div>
        <div className="absolute top-1/2 right-1/4 w-1.5 h-1.5 bg-purple-400 rounded-full animate-bounce"></div>
      </div>
      
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 relative">
        <div className={`transition-all duration-1000 transform ${
          isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
        }`}>
          
          {/* Asymmetric layout */}
          <div className="grid lg:grid-cols-2 gap-12 items-center">
            
            {/* Left side - Interactive process */}
            <div className="relative">
              <div className="absolute -inset-4 bg-gradient-to-r from-indigo-500/20 via-purple-500/20 to-teal-500/20 rounded-2xl blur-xl"></div>
              
              <div className="relative bg-gray-900/60 backdrop-blur-md border border-gray-700/50 rounded-2xl p-8">
                <h3 className="text-lg font-semibold text-gray-300 mb-6">How it works</h3>
                
                <div className="space-y-4">
                  {steps.map((step, index) => (
                    <div 
                      key={index}
                      className={`flex items-center gap-4 p-4 rounded-xl transition-all duration-500 ${
                        activeStep === index 
                          ? 'bg-gray-800/80 border border-gray-600' 
                          : 'bg-gray-800/40 border border-transparent'
                      }`}
                    >
                      <div className={`p-2 rounded-lg ${
                        activeStep === index 
                          ? 'bg-indigo-500/20' 
                          : 'bg-gray-700/50'
                      }`}>
                        <step.icon className={`w-5 h-5 ${
                          activeStep === index ? step.color : 'text-gray-400'
                        }`} />
                      </div>
                      <span className={`font-medium ${
                        activeStep === index ? 'text-white' : 'text-gray-400'
                      }`}>
                        {step.text}
                      </span>
                      {activeStep === index && (
                        <div className="ml-auto">
                          <div className="w-2 h-2 bg-indigo-400 rounded-full animate-pulse"></div>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* Right side - CTA */}
            <div className="text-left">
              <div className="inline-flex items-center gap-2 bg-indigo-500/10 border border-indigo-500/20 rounded-full px-4 py-2 mb-6">
                <Rocket className="w-4 h-4 text-indigo-400" />
                <span className="text-sm font-medium text-indigo-300">Launch Today</span>
              </div>

              <h2 className="text-3xl sm:text-4xl lg:text-5xl font-bold text-white mb-6 leading-tight">
                Stop juggling apps.
                <br />
                <span className="bg-gradient-to-r from-indigo-400 via-purple-400 to-teal-400 bg-clip-text text-transparent">
                  Start growing.
                </span>
              </h2>

              <p className="text-lg text-gray-400 mb-8 max-w-md">
                Transform your ideas into stunning websites in minutes, not months. 
                No coding, no complexity—just pure creativity.
              </p>

              {/* Unique button design */}
              <div className="flex flex-col sm:flex-row gap-4">
                <button
                  onClick={handleGenerateWebsite}
                  className="group relative bg-white text-black font-semibold px-8 py-4 rounded-xl transition-all duration-300 hover:bg-gray-100 hover:scale-105 active:scale-95 overflow-hidden"
                >
                  <span className="relative z-10 flex items-center justify-center gap-2">
                    Generate Website
                    <ArrowRight className="w-5 h-5 group-hover:translate-x-1 transition-transform" />
                  </span>
                  <div className="absolute inset-0 bg-gradient-to-r from-indigo-500/20 to-purple-500/20 opacity-0 group-hover:opacity-100 transition-opacity"></div>
                </button>

                <button className="text-gray-400 hover:text-white font-medium px-4 py-4 border border-gray-700 hover:border-gray-600 rounded-xl transition-all duration-300">
                  View Examples
                </button>
              </div>

              {/* Social proof ticker */}
              <div className="mt-8 flex items-center gap-6 text-sm text-gray-500">
                <div className="flex items-center gap-2">
                  <div className="flex -space-x-2">
                    <div className="w-6 h-6 bg-gradient-to-r from-indigo-500 to-purple-500 rounded-full border-2 border-black"></div>
                    <div className="w-6 h-6 bg-gradient-to-r from-purple-500 to-teal-500 rounded-full border-2 border-black"></div>
                    <div className="w-6 h-6 bg-gradient-to-r from-teal-500 to-indigo-500 rounded-full border-2 border-black"></div>
                  </div>
                  <span>10,000+ creators</span>
                </div>
                <div className="w-1 h-1 bg-gray-600 rounded-full"></div>
                <span>Free to start</span>
                <div className="w-1 h-1 bg-gray-600 rounded-full"></div>
                <span>No credit card</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default UniqueCTA;
</file>

<file path="src/components/Home/ReviewCard.tsx">
// src/components/Home/ReviewCard.tsx

import { cn } from '../../lib/utils';

interface ReviewCardProps {
  img: string;
  name: string;
  username: string;
  body: string;
}

const ReviewCard = ({ img, name, username, body }: ReviewCardProps) => {
  return (
    <figure
      className={cn(
        "relative w-full h-full cursor-pointer overflow-hidden rounded-2xl border p-6", // changed w-80 to w-full and added h-full
        "border-gray-800 bg-gray-900/50 hover:bg-gray-800/50 transition-colors duration-300"
      )}
    >
      <div className="flex flex-row items-center gap-4">
        <img className="size-12 rounded-full object-cover" alt={name} src={img} />
        <div className="flex flex-col">
          <figcaption className="text-base font-medium text-white">
            {name}
          </figcaption>
          <p className="text-sm font-medium text-gray-400">{username}</p>
        </div>
      </div>
      <blockquote className="mt-4 text-base text-gray-300">{body}</blockquote>
    </figure>
  );
};

export default ReviewCard;
</file>

<file path="src/components/Layout/Footer.tsx">
import React from 'react';
import { motion } from 'framer-motion';
import { Globe, Heart, Facebook, Twitter, Linkedin, Youtube, Accessibility } from 'lucide-react';

const Footer: React.FC = () => {
  const socialIcons = [
    { icon: Facebook, href: '#' },
    { icon: Twitter, href: '#' },
    { icon: Linkedin, href: '#' },
    { icon: Youtube, href: '#' },
  ];

  return (
    <footer className="bg-background text-foreground border-t border-border">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-16">
        <div className="grid grid-cols-2 md:grid-cols-5 gap-8">
          {/* Column 1 */}
          <div>
            <h3 className="text-sm font-semibold tracking-wider uppercase text-muted-foreground">Product</h3>
            <ul className="mt-4 space-y-3">
              <li><a href="#" className="text-base hover:text-primary transition-colors">AI Builder</a></li>
              <li><a href="#" className="text-base hover:text-primary transition-colors">Templates</a></li>
              <li><a href="#" className="text-base hover:text-primary transition-colors">Hosting</a></li>
            </ul>
          </div>
          {/* Column 2 */}
          <div>
            <h3 className="text-sm font-semibold tracking-wider uppercase text-muted-foreground">Company</h3>
            <ul className="mt-4 space-y-3">
              <li><a href="#" className="text-base hover:text-primary transition-colors">About Us</a></li>
              <li><a href="#" className="text-base hover:text-primary transition-colors">Careers</a></li>
              <li><a href="#" className="text-base hover:text-primary transition-colors">Contact</a></li>
            </ul>
          </div>
          {/* Column 3 */}
          <div>
            <h3 className="text-sm font-semibold tracking-wider uppercase text-muted-foreground">Resources</h3>
            <ul className="mt-4 space-y-3">
              <li><a href="#" className="text-base hover:text-primary transition-colors">Blog</a></li>
              <li><a href="#" className="text-base hover:text-primary transition-colors">Help Center</a></li>
              <li><a href="#" className="text-base hover:text-primary transition-colors">API Docs</a></li>
            </ul>
          </div>
          {/* Column 4 */}
          <div>
            <h3 className="text-sm font-semibold tracking-wider uppercase text-muted-foreground">Compare</h3>
            <ul className="mt-4 space-y-3">
              <li><a href="#" className="text-base hover:text-primary transition-colors">vs. Wix</a></li>
              <li><a href="#" className="text-base hover:text-primary transition-colors">vs. Webflow</a></li>
              <li><a href="#" className="text-base hover:text-primary transition-colors">vs. Squarespace</a></li>
            </ul>
          </div>
          {/* Column 5 */}
          <div className="col-span-2 md:col-span-1">
             <div className="relative inline-flex">
                <select className="bg-secondary border border-border rounded-md appearance-none pl-10 pr-4 py-2 text-sm">
                    <option>English</option>
                    <option>Español</option>
                </select>
                <Globe className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground" />
             </div>
             <div className="flex items-center space-x-2 mt-4 text-sm">
                <Heart className="w-5 h-5 text-red-500 fill-current" />
                <span>Proudly Built with WebCraft</span>
             </div>
          </div>
        </div>

        <div className="relative w-full overflow-hidden mt-16">
            <motion.div
                className="whitespace-nowrap"
                animate={{ x: ['0%', '-25%'] }}
                transition={{ duration: 20, repeat: Infinity, repeatType: 'mirror', ease: 'linear' }}
            >
                <h2 className="text-[140px] font-extrabold tracking-tighter inline-block">
                    Build with WebCraft
                </h2>
                <h2 className="text-[140px] font-extrabold tracking-tighter inline-block ml-8">
                    Build with WebCraft
                </h2>
            </motion.div>
        </div>
      </div>
      
      <div className="bg-secondary/50">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 flex flex-col sm:flex-row justify-between items-center space-y-4 sm:space-y-0">
            <div className="flex space-x-6 text-sm text-muted-foreground">
                <p>© {new Date().getFullYear()} WebCraft</p>
                <a href="#" className="hover:text-primary">Privacy</a>
                <a href="#" className="hover:text-primary">Terms</a>
            </div>
            <div className="flex items-center space-x-4">
                {socialIcons.map((social, index) => (
                    <a key={index} href={social.href} className="text-muted-foreground hover:text-primary">
                        <social.icon className="w-5 h-5" />
                    </a>
                ))}
                <button className="p-2 rounded-full bg-primary text-primary-foreground">
                    <Accessibility className="w-5 h-5" />
                </button>
            </div>
          </div>
      </div>
    </footer>
  );
};

export default Footer;
</file>

<file path="src/components/Layout/Header.tsx">
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { Menu, User, Bell, Layout } from 'lucide-react';
import Button from '../UI/Button';
import Logo from '../UI/Logo';

interface HeaderProps {
  onMenuClick: () => void;
  showMenuButton: boolean;
}

const Header: React.FC<HeaderProps> = ({ onMenuClick, showMenuButton }) => {
  const navigate = useNavigate();

  return (
    <motion.header
      className="bg-gray-900/70 backdrop-blur-xl border-b border-gray-800 px-4 py-3 sm:px-6 sticky top-0 z-40"
      initial={{ y: -100 }}
      animate={{ y: 0 }}
      transition={{ type: 'spring', stiffness: 300, damping: 30 }}
    >
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          {showMenuButton && (
            <motion.button
              onClick={onMenuClick}
              className="lg:hidden p-2 text-gray-400 hover:text-white hover:bg-gray-700/50 rounded-xl transition-colors"
              aria-label="Open sidebar"
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
            >
              <Menu className="h-5 w-5" />
            </motion.button>
          )}
          
          <div className="hidden lg:block">
            <Logo />
          </div>
        </div>

        <div className="flex items-center space-x-2 sm:space-x-4">
          <Button
            variant="gradient"
            size="sm"
            onClick={() => navigate('/builder')}
            icon={Layout}
          >
            <span className="hidden sm:inline">AI Builder</span>
            <span className="inline sm:hidden">Build</span>
          </Button>

          <motion.button
            className="p-2 text-gray-400 hover:text-white hover:bg-gray-700/50 rounded-xl transition-colors relative"
            aria-label="Notifications"
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.95 }}
          >
            <Bell className="h-5 w-5" />
            <motion.span
              className="absolute -top-1 -right-1 bg-indigo-500 text-xs rounded-full h-4 w-4 flex items-center justify-center text-white font-medium"
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              transition={{ delay: 0.5, type: 'spring' }}
            >
              3
            </motion.span>
          </motion.button>
          
          <div className="flex items-center space-x-3 bg-gray-800 hover:bg-gray-700/80 transition-colors cursor-pointer px-3 py-1.5 rounded-xl">
            <div className="bg-gray-700 p-1.5 rounded-lg">
              <User className="h-4 w-4 text-gray-300" />
            </div>
            <div className="hidden sm:block">
              <p className="text-sm font-medium text-white">John Doe</p>
              <p className="text-xs text-gray-400">Pro Plan</p>
            </div>
          </div>
        </div>
      </div>
    </motion.header>
  );
};

export default Header;
</file>

<file path="src/components/Layout/Sidebar.tsx">
import React from 'react';
import { NavLink } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { LayoutDashboard, BookTemplate as Template, Layout, Settings, HelpCircle, X, BarChart3, Users, ChevronRight } from 'lucide-react';
import Logo from '../UI/Logo';
import Button from '../UI/Button';

interface SidebarProps {
  isOpen: boolean;
  onClose: () => void;
}

const navigation = [
  { name: 'Dashboard', href: '/dashboard', icon: LayoutDashboard },
  { name: 'AI Builder', href: '/builder', icon: Layout },
  { name: 'Templates', href: '/templates', icon: Template },
  { name: 'Analytics', href: '/analytics', icon: BarChart3 },
  { name: 'Team', href: '/team', icon: Users },
];

const bottomNav = [
  { name: 'Settings', href: '/settings', icon: Settings },
  { name: 'Help & Support', href: '/help', icon: HelpCircle },
]

const Sidebar: React.FC<SidebarProps> = ({ isOpen, onClose }) => {
  return (
    <>
      <AnimatePresence>
        {isOpen && (
          <motion.div
            className="fixed inset-0 bg-black/60 backdrop-blur-sm z-20 lg:hidden"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={onClose}
            aria-hidden="true"
          />
        )}
      </AnimatePresence>

      <motion.div
        className={`fixed top-0 left-0 z-30 w-64 h-full bg-gray-900 border-r border-gray-800 flex flex-col transition-transform duration-300 ease-in-out lg:translate-x-0 ${isOpen ? 'translate-x-0' : '-translate-x-full'}`}
      >
        {/* Sidebar Header */}
        <div className="flex items-center justify-between p-4 h-[77px] border-b border-gray-800">
          <Logo />
          <button
            onClick={onClose}
            className="lg:hidden p-2 text-gray-400 hover:text-white hover:bg-gray-700/50 rounded-xl"
            aria-label="Close sidebar"
          >
            <X className="h-5 w-5" />
          </button>
        </div>

        {/* Navigation */}
        <nav className="flex-1 px-4 py-6 space-y-2">
          {navigation.map((item, index) => (
            <motion.div
              key={item.name}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: index * 0.05 }}
            >
              <NavLink
                to={item.href}
                onClick={onClose}
                className={({ isActive }) => `
                  flex items-center space-x-3 px-3 py-2.5 rounded-lg text-sm font-medium transition-colors duration-200 group
                  ${isActive 
                    ? 'bg-gray-800 text-white' 
                    : 'text-gray-400 hover:text-white hover:bg-gray-800/50'
                  }
                `}
              >
                <item.icon className={`h-5 w-5 flex-shrink-0 ${item.name === 'AI Builder' ? 'text-indigo-400' : 'text-gray-500 group-hover:text-gray-300'}`} />
                <span>{item.name}</span>
                {item.name === 'AI Builder' && (
                  <span className="ml-auto bg-indigo-500/20 text-indigo-400 text-xs px-2 py-0.5 rounded-full font-semibold">
                    New
                  </span>
                )}
              </NavLink>
            </motion.div>
          ))}
        </nav>

        {/* Bottom Section */}
        <div className="px-4 pb-6">
            <div className="space-y-2">
                {bottomNav.map((item) => (
                     <NavLink
                        key={item.name}
                        to={item.href}
                        onClick={onClose}
                        className="flex items-center space-x-3 px-3 py-2.5 rounded-lg text-sm font-medium text-gray-400 hover:text-white hover:bg-gray-800/50 transition-colors"
                    >
                        <item.icon className="h-5 w-5 text-gray-500" />
                        <span>{item.name}</span>
                    </NavLink>
                ))}
            </div>

            <motion.div
              className="mt-6 bg-gray-800/50 rounded-lg p-4 text-center border border-gray-700/50"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.5 }}
            >
              <h3 className="text-sm font-semibold text-white mb-1">Upgrade to Pro</h3>
              <p className="text-xs text-gray-400 mb-3">Unlock all features and build unlimited sites.</p>
              <Button size="sm" variant="secondary" className="w-full !bg-gray-700 hover:!bg-gray-600">
                Upgrade Now <ChevronRight className="w-4 h-4 ml-1" />
              </Button>
          </motion.div>
        </div>
      </motion.div>
    </>
  );
};

export default Sidebar;
</file>

<file path="src/components/magicui/bento-grid.tsx">
// src/components/magicui/bento-grid.tsx

import React, { ReactNode } from "react";
import { ArrowRight } from "lucide-react"; // CORRECTED IMPORT
import { motion, HTMLMotionProps } from "framer-motion";

import { cn } from "../../lib/utils";
import Button from "../UI/Button";

interface BentoGridProps extends HTMLMotionProps<"div"> {
  children: ReactNode;
  className?: string;
}

interface BentoCardProps extends React.ComponentPropsWithoutRef<"div"> {
  name: string;
  className: string;
  background: ReactNode;
  Icon: React.ElementType;
  description: string;
  href: string;
  cta: string;
}

const BentoGrid = ({ children, className, ...props }: BentoGridProps) => {
  return (
    <motion.div
      initial="hidden"
      whileInView="visible"
      transition={{ staggerChildren: 0.1 }}
      viewport={{ once: true }}
      className={cn(
        "grid w-full auto-rows-[22rem] grid-cols-1 md:grid-cols-3 gap-4",
        className,
      )}
      {...props}
    >
      {children}
    </motion.div>
  );
};

const BentoCard = ({
  name,
  className,
  background,
  Icon,
  description,
  href,
  cta,
}: BentoCardProps) => (
  <motion.div
    variants={{
      hidden: { opacity: 0, y: 20 },
      visible: { opacity: 1, y: 0, transition: { type: 'spring', stiffness: 100 } }
    }}
    key={name}
    className={cn(
      "group relative flex flex-col justify-between overflow-hidden rounded-xl",
      // Custom styling to match your app's theme
      "bg-card/80 border border-border transform-gpu backdrop-blur-sm",
      "[box-shadow:0_0_0_1px_rgba(0,0,0,.03),0_2px_4px_rgba(0,0,0,.05),0_12px_24px_rgba(0,0,0,.05)]",
      className,
    )}
  >
    <div className="absolute inset-0 z-0">{background}</div>
    <div className="pointer-events-none z-10 flex transform-gpu flex-col gap-1 p-6 transition-all duration-300 group-hover:-translate-y-10">
      <Icon className="h-12 w-12 origin-left transform-gpu text-foreground/70 transition-all duration-300 ease-in-out group-hover:scale-75" />
      <h3 className="text-xl font-semibold text-foreground">
        {name}
      </h3>
      <p className="max-w-lg text-muted-foreground">{description}</p>
    </div>

    <div
      className={cn(
        "pointer-events-none absolute bottom-0 flex w-full translate-y-10 transform-gpu flex-row items-center p-4 opacity-0 transition-all duration-300 group-hover:translate-y-0 group-hover:opacity-100",
      )}
    >
      <a href={href} className="pointer-events-auto">
        <Button variant="ghost" size="sm">
            {cta}
            <ArrowRight className="ms-2 h-4 w-4" /> {/* CORRECTED COMPONENT */}
        </Button>
      </a>
    </div>
    <div className="pointer-events-none absolute inset-0 transform-gpu transition-all duration-300 group-hover:bg-black/[.03] dark:group-hover:bg-neutral-800/10" />
  </motion.div>
);

export { BentoCard, BentoGrid };
</file>

<file path="src/components/magicui/box-reveal.tsx">
// src/components/magicui/box-reveal.tsx

import { motion, useInView } from "framer-motion";
import { cn } from "../../lib/utils"; // Adjusted import
import { ReactNode, useRef } from "react";

interface BoxRevealProps {
  children: ReactNode;
  className?: string;
  boxColor?: string;
  duration?: number;
}

export const BoxReveal = ({
  children,
  className,
  boxColor,
  duration = 0.5,
}: BoxRevealProps) => {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true });

  return (
    <div ref={ref} className={cn("relative overflow-hidden", className)}>
      <motion.div
        variants={{
          hidden: { opacity: 0, y: 75 },
          visible: { opacity: 1, y: 0 },
        }}
        initial="hidden"
        animate={isInView ? "visible" : "hidden"}
        transition={{ duration, delay: 0.25 }}
      >
        {children}
      </motion.div>

      <motion.div
        variants={{
          hidden: { left: 0 },
          visible: { left: "100%" },
        }}
        initial="hidden"
        animate={isInView ? "visible" : "hidden"}
        transition={{ duration, ease: "easeIn" }}
        style={{
          position: "absolute",
          top: 4,
          bottom: 4,
          left: 0,
          right: 0,
          zIndex: 20,
          backgroundColor: boxColor || "#6366f1", // Using your project's indigo
        }}
      />
    </div>
  );
};
</file>

<file path="src/components/magicui/hypertext.tsx">
"use client";


import { AnimatePresence, motion, MotionProps } from "motion/react";
import { useEffect, useRef, useState } from "react";
import { cn } from "../../lib/utils";

type CharacterSet = string[] | readonly string[];

interface HyperTextProps extends MotionProps {
  /** The text content to be animated */
  children: string;
  /** Optional className for styling */
  className?: string;
  /** Duration of the animation in milliseconds */
  duration?: number;
  /** Delay before animation starts in milliseconds */
  delay?: number;
  /** Component to render as - defaults to div */
  as?: React.ElementType;
  /** Whether to start animation when element comes into view */
  startOnView?: boolean;
  /** Whether to trigger animation on hover */
  animateOnHover?: boolean;
  /** Custom character set for scramble effect. Defaults to uppercase alphabet */
  characterSet?: CharacterSet;
}

const DEFAULT_CHARACTER_SET = Object.freeze(
  "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split(""),
) as readonly string[];

const getRandomInt = (max: number): number => Math.floor(Math.random() * max);

export function HyperText({
  children,
  className,
  duration = 800,
  delay = 0,
  as: Component = "div",
  startOnView = false,
  animateOnHover = true,
  characterSet = DEFAULT_CHARACTER_SET,
  ...props
}: HyperTextProps) {
  const MotionComponent = motion.create(Component, {
    forwardMotionProps: true,
  });

  const [displayText, setDisplayText] = useState<string[]>(() =>
    children.split(""),
  );
  const [isAnimating, setIsAnimating] = useState(false);
  const iterationCount = useRef(0);
  const elementRef = useRef<HTMLElement>(null);

  const handleAnimationTrigger = () => {
    if (animateOnHover && !isAnimating) {
      iterationCount.current = 0;
      setIsAnimating(true);
    }
  };

  // Handle animation start based on view or delay
  useEffect(() => {
    if (!startOnView) {
      const startTimeout = setTimeout(() => {
        setIsAnimating(true);
      }, delay);
      return () => clearTimeout(startTimeout);
    }

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setTimeout(() => {
            setIsAnimating(true);
          }, delay);
          observer.disconnect();
        }
      },
      { threshold: 0.1, rootMargin: "-30% 0px -30% 0px" },
    );

    if (elementRef.current) {
      observer.observe(elementRef.current);
    }

    return () => observer.disconnect();
  }, [delay, startOnView]);

  // Handle scramble animation
  useEffect(() => {
    if (!isAnimating) return;

    const maxIterations = children.length;
    const startTime = performance.now();
    let animationFrameId: number;

    const animate = (currentTime: number) => {
      const elapsed = currentTime - startTime;
      const progress = Math.min(elapsed / duration, 1);

      iterationCount.current = progress * maxIterations;

      setDisplayText((currentText) =>
        currentText.map((letter, index) =>
          letter === " "
            ? letter
            : index <= iterationCount.current
              ? children[index]
              : characterSet[getRandomInt(characterSet.length)],
        ),
      );

      if (progress < 1) {
        animationFrameId = requestAnimationFrame(animate);
      } else {
        setIsAnimating(false);
      }
    };

    animationFrameId = requestAnimationFrame(animate);

    return () => cancelAnimationFrame(animationFrameId);
  }, [children, duration, isAnimating, characterSet]);

  return (
    <MotionComponent
      ref={elementRef}
      className={cn("overflow-hidden py-2 text-4xl font-bold", className)}
      onMouseEnter={handleAnimationTrigger}
      {...props}
    >
      <AnimatePresence>
        {displayText.map((letter, index) => (
          <motion.span
            key={index}
            className={cn("font-mono", letter === " " ? "w-3" : "")}
          >
            {letter.toUpperCase()}
          </motion.span>
        ))}
      </AnimatePresence>
    </MotionComponent>
  );
}
</file>

<file path="src/components/magicui/marquee.tsx">
// src/components/magicui/marquee.tsx

import { cn } from "../../lib/utils";
import { ReactNode } from "react";

interface MarqueeProps {
  className?: string;
  reverse?: boolean;
  pauseOnHover?: boolean;
  children: ReactNode;
  vertical?: boolean;
  repeat?: number;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  [key: string]: any;
}

export const Marquee = ({
  className,
  reverse,
  pauseOnHover = false,
  children,
  vertical = false,
  repeat = 4,
  ...props
}: MarqueeProps) => {
  return (
    <div
      {...props}
      className={cn(
        "group flex overflow-hidden p-2 [--gap:1rem] [--duration:20s] [--scroll-start:0] [--scroll-end:calc(-100%_-_var(--gap))]",
        {
          "flex-row": !vertical,
          "flex-col": vertical,
        },
        className,
      )}
    >
      {Array(repeat)
        .fill(0)
        .map((_, i) => (
          <div
            key={i}
            className={cn("flex shrink-0 justify-around [gap:var(--gap)]", {
              "animate-marquee-horizontal flex-row": !vertical,
              "animate-marquee-vertical flex-col": vertical,
              "group-hover:[animation-play-state:paused]": pauseOnHover,
              "[animation-direction:reverse]": reverse,
            })}
          >
            {children}
          </div>
        ))}
    </div>
  );
};
</file>

<file path="src/components/magicui/pointer.tsx">
"use client";


import {
  AnimatePresence,
  HTMLMotionProps,
  motion,
  useMotionValue,
} from "framer-motion";
import { useEffect, useRef, useState } from "react";
import { cn } from "../../lib/utils";

type PointerProps = Omit<HTMLMotionProps<"div">, "ref">;

/**
 * A custom pointer component that displays an animated cursor.
 * Add this as a child to any component to enable a custom pointer when hovering.
 * You can pass custom children to render as the pointer.
 *
 * @component
 * @param {PointerProps} props - The component props
 */
export function Pointer({
  className,
  style,
  children,
  ...props
}: PointerProps): JSX.Element {
  const x = useMotionValue(0);
  const y = useMotionValue(0);
  const [isActive, setIsActive] = useState<boolean>(false);
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (typeof window !== "undefined" && containerRef.current) {
      // Get the parent element directly from the ref
      const parentElement = containerRef.current.parentElement;

      if (parentElement) {
        // Add cursor-none to parent
        parentElement.style.cursor = "none";

        // Add event listeners to parent
        const handleMouseMove = (e: MouseEvent) => {
          x.set(e.clientX);
          y.set(e.clientY);
        };

        const handleMouseEnter = () => {
          setIsActive(true);
        };

        const handleMouseLeave = () => {
          setIsActive(false);
        };

        parentElement.addEventListener("mousemove", handleMouseMove);
        parentElement.addEventListener("mouseenter", handleMouseEnter);
        parentElement.addEventListener("mouseleave", handleMouseLeave);

        return () => {
          parentElement.style.cursor = "";
          parentElement.removeEventListener("mousemove", handleMouseMove);
          parentElement.removeEventListener("mouseenter", handleMouseEnter);
          parentElement.removeEventListener("mouseleave", handleMouseLeave);
        };
      }
    }
  }, [x, y]);

  return (
    <>
      <div ref={containerRef} />
      <AnimatePresence>
        {isActive && (
          <motion.div
            className="transform-[translate(-50%,-50%)] pointer-events-none fixed z-50"
            style={{
              top: y,
              left: x,
              ...style,
            }}
            initial={{
              scale: 0,
              opacity: 0,
            }}
            animate={{
              scale: 1,
              opacity: 1,
            }}
            exit={{
              scale: 0,
              opacity: 0,
            }}
            {...props}
          >
            {children || (
              <svg
                stroke="currentColor"
                fill="currentColor"
                strokeWidth="1"
                viewBox="0 0 16 16"
                height="24"
                width="24"
                xmlns="http://www.w3.org/2000/svg"
                className={cn(
                  "rotate-[-70deg] stroke-white text-black",
                  className,
                )}
              >
                <path d="M14.082 2.182a.5.5 0 0 1 .103.557L8.528 15.467a.5.5 0 0 1-.917-.007L5.57 10.694.803 8.652a.5.5 0 0 1-.006-.916l12.728-5.657a.5.5 0 0 1 .556.103z" />
              </svg>
            )}
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
}
</file>

<file path="src/components/UI/Button.tsx">
import React from 'react';
import { motion } from 'framer-motion';
import { DivideIcon as LucideIcon } from 'lucide-react';

interface ButtonProps {
  children: React.ReactNode;
  variant?: 'primary' | 'secondary' | 'ghost' | 'danger' | 'gradient';
  size?: 'sm' | 'md' | 'lg';
  disabled?: boolean;
  loading?: boolean;
  icon?: LucideIcon;
  onClick?: () => void;
  type?: 'button' | 'submit' | 'reset';
  className?: string;
}

const Button: React.FC<ButtonProps> = ({
  children,
  variant = 'primary',
  size = 'md',
  disabled = false,
  loading = false,
  icon: Icon,
  onClick,
  type = 'button',
  className = '',
}) => {
  const baseClasses = 'inline-flex items-center justify-center font-medium rounded-xl transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-900 disabled:opacity-50 disabled:cursor-not-allowed relative overflow-hidden';
  
  const variantClasses = {
    primary: 'bg-teal-500 hover:bg-teal-400 text-white focus:ring-teal-500 shadow-lg hover:shadow-xl hover:shadow-teal-500/25 hover:-translate-y-0.5',
    secondary: 'bg-gray-700 hover:bg-gray-600 text-white focus:ring-gray-500 border border-gray-600 hover:border-gray-500 hover:-translate-y-0.5',
    ghost: 'text-gray-300 hover:text-white hover:bg-gray-700/50 focus:ring-gray-500 backdrop-blur-sm',
    danger: 'bg-red-600 hover:bg-red-500 text-white focus:ring-red-500 shadow-lg hover:shadow-xl hover:shadow-red-500/25 hover:-translate-y-0.5',
    gradient: 'bg-gradient-to-r from-teal-500 to-blue-500 hover:from-teal-400 hover:to-blue-400 text-white focus:ring-teal-500 shadow-lg hover:shadow-xl hover:shadow-teal-500/25 hover:-translate-y-0.5',
  };
  
  const sizeClasses = {
    sm: 'px-4 py-2 text-sm',
    md: 'px-6 py-3 text-sm',
    lg: 'px-8 py-4 text-base',
  };

  return (
    <motion.button
      type={type}
      onClick={onClick}
      disabled={disabled || loading}
      className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`}
      whileHover={{ scale: disabled ? 1 : 1.02 }}
      whileTap={{ scale: disabled ? 1 : 0.98 }}
      aria-label={typeof children === 'string' ? children : undefined}
    >
      {/* Shimmer effect for gradient buttons */}
      {variant === 'gradient' && (
        <motion.div
          className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent"
          initial={{ x: '-100%' }}
          animate={{ x: '100%' }}
          transition={{ duration: 2, repeat: Infinity, repeatDelay: 3 }}
        />
      )}
      
      {loading ? (
        <motion.div
          className="animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2"
          animate={{ rotate: 360 }}
          transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
        />
      ) : Icon ? (
        <Icon className="h-4 w-4 mr-2" />
      ) : null}
      {children}
    </motion.button>
  );
};

export default Button;
</file>

<file path="src/components/UI/Logo.tsx">
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { Globe } from 'lucide-react';

interface LogoProps {
  className?: string;
}

const Logo: React.FC<LogoProps> = ({ className }) => {
  const navigate = useNavigate();

  return (
    <motion.div
      onClick={() => navigate('/')}
      className={`flex items-center space-x-3 group cursor-pointer ${className}`}
      whileHover={{ scale: 1.02 }}
    >
      <motion.div
        className="bg-white p-2 rounded-xl group-hover:shadow-lg group-hover:shadow-indigo-500/25 transition-all duration-300"
        whileHover={{ rotate: -10, scale: 1.1 }}
      >
        <Globe className="h-6 w-6 text-black" />
      </motion.div>
      <motion.span
        className="text-xl font-bold text-white hidden sm:block"
        initial={{ opacity: 0, x: -10 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ delay: 0.1 }}
      >
        WebCraft
      </motion.span>
    </motion.div>
  );
};

export default Logo;
</file>

<file path="src/components/UI/Toast.tsx">
import React, { createContext, useContext, useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { CheckCircle, XCircle, AlertCircle, Info, X } from 'lucide-react';

type ToastType = 'success' | 'error' | 'warning' | 'info';

interface Toast {
  id: string;
  type: ToastType;
  message: string;
  duration?: number;
}

interface ToastContextType {
  showToast: (type: ToastType, message: string, duration?: number) => void;
}

const ToastContext = createContext<ToastContextType | null>(null);

export const useToast = () => {
  const context = useContext(ToastContext);
  if (!context) {
    throw new Error('useToast must be used within a ToastProvider');
  }
  return context;
};

interface ToastProviderProps {
  children: React.ReactNode;
}

export const ToastProvider: React.FC<ToastProviderProps> = ({ children }) => {
  const [toasts, setToasts] = useState<Toast[]>([]);

  const removeToast = useCallback((id: string) => {
    setToasts(prev => prev.filter(toast => toast.id !== id));
  }, []);

  const showToast = useCallback((type: ToastType, message: string, duration = 5000) => {
    const id = Math.random().toString(36).substr(2, 9);
    const toast = { id, type, message, duration };
    
    setToasts(prev => [...prev, toast]);
    
    if (duration > 0) {
      setTimeout(() => removeToast(id), duration);
    }
  }, [removeToast]);

  const getIcon = (type: ToastType) => {
    switch (type) {
      case 'success': return CheckCircle;
      case 'error': return XCircle;
      case 'warning': return AlertCircle;
      case 'info': return Info;
    }
  };

  const getColors = (type: ToastType) => {
    switch (type) {
      case 'success': return 'bg-green-600/90 border-green-500/50 text-white';
      case 'error': return 'bg-red-600/90 border-red-500/50 text-white';
      case 'warning': return 'bg-yellow-600/90 border-yellow-500/50 text-white';
      case 'info': return 'bg-blue-600/90 border-blue-500/50 text-white';
    }
  };

  return (
    <ToastContext.Provider value={{ showToast }}>
      {children}
      
      <div className="fixed top-4 right-4 z-50 space-y-2">
        <AnimatePresence>
          {toasts.map((toast, index) => {
            const Icon = getIcon(toast.type);
            const colors = getColors(toast.type);
            
            return (
              <motion.div
                key={toast.id}
                className={`flex items-center space-x-3 px-4 py-3 rounded-xl shadow-2xl max-w-sm backdrop-blur-xl border ${colors}`}
                initial={{ opacity: 0, x: 300, scale: 0.8 }}
                animate={{ opacity: 1, x: 0, scale: 1 }}
                exit={{ opacity: 0, x: 300, scale: 0.8 }}
                transition={{ 
                  type: "spring", 
                  damping: 25, 
                  stiffness: 300,
                  delay: index * 0.1 
                }}
                layout
              >
                <motion.div
                  initial={{ rotate: -180, scale: 0 }}
                  animate={{ rotate: 0, scale: 1 }}
                  transition={{ delay: 0.2 }}
                >
                  <Icon className="h-5 w-5 flex-shrink-0" />
                </motion.div>
                <p className="text-sm font-medium flex-1">{toast.message}</p>
                <motion.button
                  onClick={() => removeToast(toast.id)}
                  className="flex-shrink-0 p-1 hover:bg-white hover:bg-opacity-20 rounded-lg transition-colors duration-200"
                  aria-label="Close notification"
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                >
                  <X className="h-4 w-4" />
                </motion.button>
              </motion.div>
            );
          })}
        </AnimatePresence>
      </div>
    </ToastContext.Provider>
  );
};
</file>

<file path="src/contexts/ThemeContext.tsx">
import React, { createContext, useContext, useState, useEffect, useMemo } from 'react';

type Theme = 'light' | 'dark';

interface ThemeContextType {
  theme: Theme;
  toggleTheme: () => void;
}

const ThemeContext = createContext<ThemeContextType | null>(null);

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};

export const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [theme, setTheme] = useState<Theme>(() => {
    return (localStorage.getItem('theme') as Theme) || 'dark';
  });

  useEffect(() => {
    const root = window.document.documentElement;
    root.classList.remove('light', 'dark');
    root.classList.add(theme);
    localStorage.setItem('theme', theme);
  }, [theme]);

  const toggleTheme = () => {
    setTheme((prevTheme) => (prevTheme === 'light' ? 'dark' : 'light'));
  };

  const value = useMemo(() => ({ theme, toggleTheme }), [theme]);

  return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>;
};
</file>

<file path="src/contexts/WebsiteContext.tsx">
// src/contexts/WebsiteContext.tsx

import React, { createContext, useContext, useReducer, ReactNode } from 'react';
import { initialWebsites } from '../data/mockData';

export interface Website {
  id: string;
  name: string;
  url: string;
  status: 'live' | 'draft' | 'maintenance';
  visits: number;
  lastUpdated: string;
  thumbnail: string;
  growth: number;
}

type Action = 
  | { type: 'ADD_WEBSITE'; payload: Website }
  | { type: 'DELETE_WEBSITE'; payload: string };

type State = {
  websites: Website[];
};

interface WebsiteContextType extends State {
  addWebsite: (website: Website) => void;
  deleteWebsite: (websiteId: string) => void;
}

const WebsiteContext = createContext<WebsiteContextType | null>(null);

const websiteReducer = (state: State, action: Action): State => {
  switch (action.type) {
    case 'ADD_WEBSITE':
      return {
        ...state,
        websites: [action.payload, ...state.websites],
      };
    case 'DELETE_WEBSITE':
      return {
        ...state,
        websites: state.websites.filter(site => site.id !== action.payload),
      };
    default:
      return state;
  }
};

export const useWebsites = () => {
  const context = useContext(WebsiteContext);
  if (!context) {
    throw new Error('useWebsites must be used within a WebsiteProvider');
  }
  return context;
};

export const WebsiteProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [state, dispatch] = useReducer(websiteReducer, { websites: initialWebsites });

  const addWebsite = (website: Website) => {
    dispatch({ type: 'ADD_WEBSITE', payload: website });
  };

  const deleteWebsite = (websiteId: string) => {
    dispatch({ type: 'DELETE_WEBSITE', payload: websiteId });
  };

  return (
    <WebsiteContext.Provider value={{ ...state, addWebsite, deleteWebsite }}>
      {children}
    </WebsiteContext.Provider>
  );
};
</file>

<file path="src/data/mockData.ts">
// src/data/mockData.ts

import { Website } from '../contexts/WebsiteContext';

export const initialWebsites: Website[] = [
    {
      id: '1',
      name: 'Bloom & Petal Florist',
      url: 'bloomandpetal.com',
      status: 'live',
      visits: 2890,
      lastUpdated: '1h ago',
      thumbnail: 'https://images.pexels.com/photos/1083822/pexels-photo-1083822.jpeg?auto=compress&cs=tinysrgb&w=400',
      growth: 15.2
    },
    {
      id: '2',
      name: 'Quantum Tech Solutions',
      url: 'quantumtech.dev',
      status: 'draft',
      visits: 0,
      lastUpdated: '3d ago',
      thumbnail: 'https://images.pexels.com/photos/3861969/pexels-photo-3861969.jpeg?auto=compress&cs=tinysrgb&w=400',
      growth: 0
    },
    {
      id: '3',
      name: 'The Daily Grind Cafe',
      url: 'dailygrind.cafe',
      status: 'live',
      visits: 1723,
      lastUpdated: '8h ago',
      thumbnail: 'https://images.pexels.com/photos/312418/pexels-photo-312418.jpeg?auto=compress&cs=tinysrgb&w=400',
      growth: -2.1
    },
     {
      id: '4',
      name: 'Apex Fitness Gym',
      url: 'apexfitness.fit',
      status: 'maintenance',
      visits: 540,
      lastUpdated: '5m ago',
      thumbnail: 'https://images.pexels.com/photos/2294361/pexels-photo-2294361.jpeg?auto=compress&cs=tinysrgb&w=400',
      growth: 5.8
    }
];

export const activityFeed = [
    { id: 1, type: 'publish', text: 'New blog post on "Bloom & Petal"', time: '15m ago' },
    { id: 2, type: 'user', text: '5 new user signups this morning', time: '1h ago' },
    { id: 3, type: 'comment', text: 'New comment on "The Daily Grind Cafe"', time: '3h ago' },
    { id: 4, type: 'create', text: 'New website "Apex Fitness Gym" created', time: '1d ago' },
];
</file>

<file path="src/lib/utils.ts">
// src/lib/utils.ts

import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);
</file>

<file path="src/pages/Builder.tsx">
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Layout, Wand2, MessageSquare, Sparkles, Settings, ArrowRight, CheckCircle, Lightbulb, Zap } from 'lucide-react';
import Button from '../components/UI/Button';
import Card from '../components/UI/Card';
import { useToast } from '../components/UI/Toast';

const Builder: React.FC = () => {
  const { showToast } = useToast();
  const [currentStep, setCurrentStep] = useState(1);
  const [isGenerating, setIsGenerating] = useState(false);
  const [formData, setFormData] = useState({
    businessName: '',
    businessType: '',
    description: '',
    style: '',
    colors: '',
    features: [] as string[],
    pages: [] as string[]
  });

  const steps = [
    { id: 1, title: 'Business Info', icon: MessageSquare, color: 'from-blue-500 to-cyan-500' },
    { id: 2, title: 'Style & Design', icon: Sparkles, color: 'from-purple-500 to-pink-500' },
    { id: 3, title: 'Features', icon: Settings, color: 'from-green-500 to-emerald-500' },
    { id: 4, title: 'Generate', icon: Layout, color: 'from-teal-500 to-blue-500' }
  ];

  const businessTypes = [
    { name: 'Restaurant & Food', icon: '🍽️', description: 'Cafes, restaurants, food delivery' },
    { name: 'Retail & E-commerce', icon: '🛍️', description: 'Online stores, boutiques, marketplaces' },
    { name: 'Professional Services', icon: '💼', description: 'Consulting, legal, accounting' },
    { name: 'Healthcare', icon: '🏥', description: 'Clinics, doctors, wellness centers' },
    { name: 'Fitness & Wellness', icon: '💪', description: 'Gyms, yoga studios, spas' },
    { name: 'Creative & Design', icon: '🎨', description: 'Agencies, photographers, artists' },
    { name: 'Technology', icon: '💻', description: 'Software, startups, tech services' },
    { name: 'Non-profit', icon: '❤️', description: 'Charities, foundations, causes' }
  ];

  const styleOptions = [
    { 
      name: 'Modern', 
      description: 'Clean, minimalist design with contemporary elements',
      preview: 'bg-gradient-to-br from-gray-100 to-gray-200',
      accent: 'border-blue-500'
    },
    { 
      name: 'Professional', 
      description: 'Corporate look with structured layout and typography',
      preview: 'bg-gradient-to-br from-blue-50 to-blue-100',
      accent: 'border-indigo-500'
    },
    { 
      name: 'Creative', 
      description: 'Artistic and unique design with bold visual elements',
      preview: 'bg-gradient-to-br from-purple-50 to-pink-50',
      accent: 'border-purple-500'
    },
    { 
      name: 'Classic', 
      description: 'Timeless design with traditional layout patterns',
      preview: 'bg-gradient-to-br from-amber-50 to-orange-50',
      accent: 'border-amber-500'
    }
  ];

  const colorSchemes = [
    { name: 'Ocean Blue', colors: ['#1e40af', '#3b82f6', '#60a5fa'], gradient: 'from-blue-600 to-blue-400' },
    { name: 'Forest Green', colors: ['#166534', '#22c55e', '#4ade80'], gradient: 'from-green-600 to-green-400' },
    { name: 'Sunset Orange', colors: ['#ea580c', '#f97316', '#fb923c'], gradient: 'from-orange-600 to-orange-400' },
    { name: 'Royal Purple', colors: ['#7c3aed', '#a855f7', '#c084fc'], gradient: 'from-purple-600 to-purple-400' },
    { name: 'Classic Gray', colors: ['#374151', '#6b7280', '#9ca3af'], gradient: 'from-gray-600 to-gray-400' }
  ];

  const availableFeatures = [
    { name: 'Contact Form', description: 'Let customers reach you easily' },
    { name: 'Image Gallery', description: 'Showcase your work beautifully' },
    { name: 'Testimonials', description: 'Build trust with customer reviews' },
    { name: 'Social Media Links', description: 'Connect all your social profiles' },
    { name: 'Blog Section', description: 'Share updates and insights' },
    { name: 'Online Booking', description: 'Accept appointments online' },
    { name: 'E-commerce', description: 'Sell products directly' },
    { name: 'Live Chat', description: 'Support customers in real-time' }
  ];

  const availablePages = [
    { name: 'About Us', description: 'Tell your story', essential: true },
    { name: 'Services', description: 'What you offer', essential: true },
    { name: 'Portfolio', description: 'Show your work', essential: false },
    { name: 'Contact', description: 'Get in touch', essential: true },
    { name: 'Blog', description: 'Share insights', essential: false },
    { name: 'Privacy Policy', description: 'Legal compliance', essential: false },
    { name: 'FAQ', description: 'Common questions', essential: false },
    { name: 'Team', description: 'Meet the people', essential: false }
  ];

  const handleNext = () => {
    if (currentStep < 4) {
      setCurrentStep(currentStep + 1);
    } else {
      handleGenerate();
    }
  };

  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleGenerate = async () => {
    setIsGenerating(true);
    showToast('info', 'AI is analyzing your requirements...');
    
    // Simulate AI generation process
    setTimeout(() => {
      showToast('success', 'Generating website structure...');
    }, 1000);
    
    setTimeout(() => {
      showToast('success', 'Creating design elements...');
    }, 2000);
    
    setTimeout(() => {
      showToast('success', 'Optimizing for your industry...');
    }, 3000);
    
    setTimeout(() => {
      setIsGenerating(false);
      showToast('success', 'Website generated successfully! 🎉');
    }, 4000);
  };

  const toggleFeature = (feature: string) => {
    setFormData(prev => ({
      ...prev,
      features: prev.features.includes(feature)
        ? prev.features.filter(f => f !== feature)
        : [...prev.features, feature]
    }));
  };

  const togglePage = (page: string) => {
    setFormData(prev => ({
      ...prev,
      pages: prev.pages.includes(page)
        ? prev.pages.filter(p => p !== page)
        : [...prev.pages, page]
    }));
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <motion.div
            className="space-y-6"
            initial={{ opacity: 0, x: 50 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -50 }}
          >
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-3">
                Business Name *
              </label>
              <motion.input
                type="text"
                value={formData.businessName}
                onChange={(e) => setFormData({...formData, businessName: e.target.value})}
                placeholder="Enter your business name"
                className="w-full px-4 py-3 bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-teal-500/50 focus:border-teal-500/50 transition-all duration-200"
                whileFocus={{ scale: 1.02 }}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-3">
                Business Type *
              </label>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {businessTypes.map((type) => (
                  <motion.button
                    key={type.name}
                    onClick={() => setFormData({...formData, businessType: type.name})}
                    className={`p-4 text-left border rounded-xl transition-all duration-200 ${
                      formData.businessType === type.name
                        ? 'border-teal-500/50 bg-teal-500/10 text-white'
                        : 'border-gray-700/50 bg-gray-800/30 text-gray-300 hover:border-gray-600/50 hover:bg-gray-700/30'
                    }`}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <div className="flex items-center space-x-3">
                      <span className="text-2xl">{type.icon}</span>
                      <div>
                        <h3 className="font-medium">{type.name}</h3>
                        <p className="text-xs text-gray-400">{type.description}</p>
                      </div>
                    </div>
                  </motion.button>
                ))}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-3">
                Business Description
              </label>
              <motion.textarea
                value={formData.description}
                onChange={(e) => setFormData({...formData, description: e.target.value})}
                placeholder="Describe your business, services, and what makes you unique..."
                rows={4}
                className="w-full px-4 py-3 bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-teal-500/50 focus:border-teal-500/50 resize-none transition-all duration-200"
                whileFocus={{ scale: 1.01 }}
              />
              <div className="flex items-center space-x-2 mt-2 text-xs text-gray-400">
                <Lightbulb className="h-4 w-4" />
                <span>Tip: Be specific about your services and target audience for better results</span>
              </div>
            </div>
          </motion.div>
        );

      case 2:
        return (
          <motion.div
            className="space-y-8"
            initial={{ opacity: 0, x: 50 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -50 }}
          >
            <div>
              <h3 className="text-lg font-medium text-white mb-4">Choose a Style</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {styleOptions.map((style) => (
                  <motion.button
                    key={style.name}
                    onClick={() => setFormData({...formData, style: style.name})}
                    className={`p-6 text-left border-2 rounded-xl transition-all duration-200 ${
                      formData.style === style.name
                        ? `${style.accent} bg-gray-800/50`
                        : 'border-gray-700/50 bg-gray-800/30 hover:border-gray-600/50'
                    }`}
                    whileHover={{ scale: 1.02, y: -2 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <div className={`w-full h-16 rounded-lg mb-4 ${style.preview}`} />
                    <h4 className="font-medium text-white mb-2">{style.name}</h4>
                    <p className="text-sm text-gray-400">{style.description}</p>
                  </motion.button>
                ))}
              </div>
            </div>

            <div>
              <h3 className="text-lg font-medium text-white mb-4">Color Scheme</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {colorSchemes.map((scheme) => (
                  <motion.button
                    key={scheme.name}
                    onClick={() => setFormData({...formData, colors: scheme.name})}
                    className={`p-4 text-left border rounded-xl transition-all duration-200 ${
                      formData.colors === scheme.name
                        ? 'border-teal-500/50 bg-teal-500/10'
                        : 'border-gray-700/50 bg-gray-800/30 hover:border-gray-600/50'
                    }`}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <div className="flex items-center space-x-3 mb-3">
                      <div className="flex space-x-1">
                        {scheme.colors.map((color, index) => (
                          <motion.div
                            key={index}
                            className="w-6 h-6 rounded-full border-2 border-white/20"
                            style={{ backgroundColor: color }}
                            whileHover={{ scale: 1.2 }}
                          />
                        ))}
                      </div>
                    </div>
                    <span className="text-white font-medium">{scheme.name}</span>
                  </motion.button>
                ))}
              </div>
            </div>
          </motion.div>
        );

      case 3:
        return (
          <motion.div
            className="space-y-8"
            initial={{ opacity: 0, x: 50 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -50 }}
          >
            <div>
              <h3 className="text-lg font-medium text-white mb-4">Features to Include</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {availableFeatures.map((feature) => (
                  <motion.button
                    key={feature.name}
                    onClick={() => toggleFeature(feature.name)}
                    className={`p-4 text-left border rounded-xl transition-all duration-200 ${
                      formData.features.includes(feature.name)
                        ? 'border-teal-500/50 bg-teal-500/10'
                        : 'border-gray-700/50 bg-gray-800/30 hover:border-gray-600/50'
                    }`}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <div className="flex items-start space-x-3">
                      <motion.div
                        className={`w-5 h-5 rounded border-2 flex items-center justify-center mt-0.5 ${
                          formData.features.includes(feature.name)
                            ? 'border-teal-500 bg-teal-500'
                            : 'border-gray-600'
                        }`}
                        animate={{ scale: formData.features.includes(feature.name) ? 1.1 : 1 }}
                      >
                        {formData.features.includes(feature.name) && (
                          <CheckCircle className="h-3 w-3 text-white" />
                        )}
                      </motion.div>
                      <div>
                        <h4 className="font-medium text-white">{feature.name}</h4>
                        <p className="text-sm text-gray-400">{feature.description}</p>
                      </div>
                    </div>
                  </motion.button>
                ))}
              </div>
            </div>

            <div>
              <h3 className="text-lg font-medium text-white mb-4">Pages to Create</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {availablePages.map((page) => (
                  <motion.button
                    key={page.name}
                    onClick={() => togglePage(page.name)}
                    className={`p-4 text-left border rounded-xl transition-all duration-200 ${
                      formData.pages.includes(page.name) || page.essential
                        ? 'border-teal-500/50 bg-teal-500/10'
                        : 'border-gray-700/50 bg-gray-800/30 hover:border-gray-600/50'
                    }`}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    disabled={page.essential}
                  >
                    <div className="flex items-start space-x-3">
                      <motion.div
                        className={`w-5 h-5 rounded border-2 flex items-center justify-center mt-0.5 ${
                          formData.pages.includes(page.name) || page.essential
                            ? 'border-teal-500 bg-teal-500'
                            : 'border-gray-600'
                        }`}
                        animate={{ scale: formData.pages.includes(page.name) || page.essential ? 1.1 : 1 }}
                      >
                        {(formData.pages.includes(page.name) || page.essential) && (
                          <CheckCircle className="h-3 w-3 text-white" />
                        )}
                      </motion.div>
                      <div>
                        <div className="flex items-center space-x-2">
                          <h4 className="font-medium text-white">{page.name}</h4>
                          {page.essential && (
                            <span className="text-xs bg-teal-500/20 text-teal-400 px-2 py-1 rounded-full">
                              Essential
                            </span>
                          )}
                        </div>
                        <p className="text-sm text-gray-400">{page.description}</p>
                      </div>
                    </div>
                  </motion.button>
                ))}
              </div>
            </div>
          </motion.div>
        );

      case 4:
        return (
          <motion.div
            className="text-center space-y-8"
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
          >
            <motion.div
              className="bg-gradient-to-r from-teal-500 to-blue-500 rounded-full p-8 w-32 h-32 mx-auto flex items-center justify-center"
              animate={{ 
                rotate: isGenerating ? 360 : 0,
                scale: isGenerating ? [1, 1.1, 1] : 1
              }}
              transition={{ 
                rotate: { duration: 2, repeat: isGenerating ? Infinity : 0, ease: "linear" },
                scale: { duration: 1, repeat: isGenerating ? Infinity : 0 }
              }}
            >
              {isGenerating ? (
                <Zap className="h-16 w-16 text-white" />
              ) : (
                <Wand2 className="h-16 w-16 text-white" />
              )}
            </motion.div>
            
            <div>
              <h3 className="text-2xl font-bold text-white mb-2">
                {isGenerating ? 'Generating Your Website...' : 'Ready to Generate!'}
              </h3>
              <p className="text-gray-400 mb-6">
                {isGenerating 
                  ? 'Our AI is crafting your perfect website. This may take a few moments.'
                  : 'Our AI will create a custom website based on your preferences'
                }
              </p>
            </div>

            {isGenerating && (
              <motion.div
                className="w-full bg-gray-700 rounded-full h-2 overflow-hidden"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
              >
                <motion.div
                  className="h-full bg-gradient-to-r from-teal-500 to-blue-500 rounded-full"
                  initial={{ width: '0%' }}
                  animate={{ width: '100%' }}
                  transition={{ duration: 4, ease: "easeInOut" }}
                />
              </motion.div>
            )}

            <Card className="p-6 text-left max-w-md mx-auto">
              <h4 className="font-medium text-white mb-4">Summary</h4>
              <div className="space-y-3 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-400">Business:</span>
                  <span className="text-white">{formData.businessName || 'Not specified'}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Type:</span>
                  <span className="text-white">{formData.businessType || 'Not specified'}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Style:</span>
                  <span className="text-white">{formData.style || 'Not specified'}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Colors:</span>
                  <span className="text-white">{formData.colors || 'Not specified'}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Features:</span>
                  <span className="text-white">{formData.features.length} selected</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Pages:</span>
                  <span className="text-white">{formData.pages.length + 3} total</span>
                </div>
              </div>
            </Card>
          </motion.div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="p-6 max-w-4xl mx-auto">
      {/* Header */}
      <motion.div
        className="text-center mb-8"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        <h1 className="text-3xl font-bold text-white mb-2">Launch Your Business Website</h1>
        <p className="text-gray-400">Get online in just a few minutes with our guided setup.</p>
      </motion.div>

      {/* Progress Steps */}
      <div className="flex items-center justify-center mb-8">
        {steps.map((step, index) => (
          <React.Fragment key={step.id}>
            <motion.div
              className={`flex items-center space-x-2 ${
                currentStep >= step.id ? 'text-teal-400' : 'text-gray-500'
              }`}
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: index * 0.1 }}
            >
              <motion.div
                className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${
                  currentStep >= step.id 
                    ? 'border-teal-400 bg-gradient-to-r from-teal-500 to-blue-500 text-white shadow-lg' 
                    : 'border-gray-600 text-gray-500'
                }`}
                whileHover={{ scale: 1.1 }}
                animate={{ 
                  scale: currentStep === step.id ? [1, 1.1, 1] : 1,
                }}
                transition={{ 
                  scale: { duration: 1, repeat: currentStep === step.id ? Infinity : 0 }
                }}
              >
                {currentStep > step.id ? (
                  <CheckCircle className="h-5 w-5" />
                ) : (
                  <step.icon className="h-5 w-5" />
                )}
              </motion.div>
              <span className="text-sm font-medium hidden sm:block">{step.title}</span>
            </motion.div>
            {index < steps.length - 1 && (
              <motion.div
                className={`w-12 h-0.5 mx-2 ${
                  currentStep > step.id ? 'bg-gradient-to-r from-teal-400 to-blue-400' : 'bg-gray-600'
                }`}
                initial={{ scaleX: 0 }}
                animate={{ scaleX: currentStep > step.id ? 1 : 0.3 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
              />
            )}
          </React.Fragment>
        ))}
      </div>

      {/* Step Content */}
      <Card className="p-8 mb-8 min-h-[500px]">
        <AnimatePresence mode="wait">
          {renderStepContent()}
        </AnimatePresence>
      </Card>

      {/* Navigation */}
      <motion.div
        className="flex justify-between"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.3 }}
      >
        <Button
          variant="secondary"
          onClick={handleBack}
          disabled={currentStep === 1 || isGenerating}
        >
          Back
        </Button>
        
        <Button
          variant="gradient"
          onClick={handleNext}
          icon={currentStep === 4 ? Layout : ArrowRight}
          disabled={
            isGenerating ||
            (currentStep === 1 && (!formData.businessName || !formData.businessType)) ||
            (currentStep === 2 && (!formData.style || !formData.colors))
          }
          loading={isGenerating}
        >
          {currentStep === 4 ? 'Generate Website' : 'Next'}
        </Button>
      </motion.div>
    </div>
  );
};

export default Builder;
</file>

<file path="src/pages/Templates.tsx">
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Search, Filter, Eye, Zap, Star, Heart, Download } from 'lucide-react';
import Button from '../components/UI/Button';
import Card from '../components/UI/Card';
import { useToast } from '../components/UI/Toast';

interface Template {
  id: string;
  name: string;
  category: string;
  preview: string;
  tags: string[];
  isPremium: boolean;
  rating: number;
  downloads: number;
  isFavorite: boolean;
}

const Templates: React.FC = () => {
  const { showToast } = useToast();
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [favorites, setFavorites] = useState<string[]>([]);

  const templates: Template[] = [
    {
      id: '1',
      name: 'Modern Restaurant',
      category: 'restaurant',
      preview: 'https://images.pexels.com/photos/262978/pexels-photo-262978.jpeg?auto=compress&cs=tinysrgb&w=400',
      tags: ['responsive', 'menu', 'booking'],
      isPremium: false,
      rating: 4.8,
      downloads: 1247,
      isFavorite: false
    },
    {
      id: '2',
      name: 'Tech Startup',
      category: 'business',
      preview: 'https://images.pexels.com/photos/3184306/pexels-photo-3184306.jpeg?auto=compress&cs=tinysrgb&w=400',
      tags: ['modern', 'landing', 'corporate'],
      isPremium: true,
      rating: 4.9,
      downloads: 2156,
      isFavorite: true
    },
    {
      id: '3',
      name: 'Fashion Store',
      category: 'ecommerce',
      preview: 'https://images.pexels.com/photos/356056/pexels-photo-356056.jpeg?auto=compress&cs=tinysrgb&w=400',
      tags: ['ecommerce', 'fashion', 'gallery'],
      isPremium: false,
      rating: 4.7,
      downloads: 892,
      isFavorite: false
    },
    {
      id: '4',
      name: 'Fitness Center',
      category: 'fitness',
      preview: 'https://images.pexels.com/photos/416778/pexels-photo-416778.jpeg?auto=compress&cs=tinysrgb&w=400',
      tags: ['fitness', 'classes', 'membership'],
      isPremium: true,
      rating: 4.6,
      downloads: 634,
      isFavorite: false
    },
    {
      id: '5',
      name: 'Creative Agency',
      category: 'agency',
      preview: 'https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=400',
      tags: ['creative', 'portfolio', 'agency'],
      isPremium: false,
      rating: 4.8,
      downloads: 1543,
      isFavorite: true
    },
    {
      id: '6',
      name: 'Medical Practice',
      category: 'healthcare',
      preview: 'https://images.pexels.com/photos/305568/pexels-photo-305568.jpeg?auto=compress&cs=tinysrgb&w=400',
      tags: ['medical', 'appointments', 'professional'],
      isPremium: true,
      rating: 4.9,
      downloads: 987,
      isFavorite: false
    }
  ];

  const categories = [
    { value: 'all', label: 'All Templates', count: templates.length },
    { value: 'restaurant', label: 'Restaurant', count: templates.filter(t => t.category === 'restaurant').length },
    { value: 'business', label: 'Business', count: templates.filter(t => t.category === 'business').length },
    { value: 'ecommerce', label: 'E-commerce', count: templates.filter(t => t.category === 'ecommerce').length },
    { value: 'fitness', label: 'Fitness', count: templates.filter(t => t.category === 'fitness').length },
    { value: 'agency', label: 'Agency', count: templates.filter(t => t.category === 'agency').length },
    { value: 'healthcare', label: 'Healthcare', count: templates.filter(t => t.category === 'healthcare').length }
  ];

  const filteredTemplates = templates.filter(template => {
    const matchesSearch = template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         template.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesCategory = selectedCategory === 'all' || template.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const handleUseTemplate = (template: Template) => {
    if (template.isPremium) {
      showToast('warning', 'This is a premium template. Upgrade to use it.');
    } else {
      showToast('success', `Starting with ${template.name} template...`);
    }
  };

  const handlePreview = (template: Template) => {
    showToast('info', `Opening preview for ${template.name}`);
  };

  const toggleFavorite = (templateId: string) => {
    setFavorites(prev => 
      prev.includes(templateId) 
        ? prev.filter(id => id !== templateId)
        : [...prev, templateId]
    );
    showToast('success', 'Favorites updated');
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Header */}
      <motion.div
        className="mb-8"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        <h1 className="text-3xl font-bold text-white mb-2">Website Templates</h1>
        <p className="text-gray-400">Choose from our collection of professionally designed templates</p>
      </motion.div>

      {/* Search and Filter */}
      <motion.div
        className="flex flex-col lg:flex-row gap-4 mb-8"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
      >
        <div className="relative flex-1">
          <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
          <motion.input
            type="text"
            placeholder="Search templates..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-12 pr-4 py-3 bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-teal-500/50 focus:border-teal-500/50 transition-all duration-200"
            whileFocus={{ scale: 1.02 }}
          />
        </div>
        
        <div className="relative">
          <Filter className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
          <select
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
            className="pl-12 pr-8 py-3 bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-teal-500/50 focus:border-teal-500/50 appearance-none min-w-[200px] transition-all duration-200"
          >
            {categories.map(category => (
              <option key={category.value} value={category.value}>
                {category.label} ({category.count})
              </option>
            ))}
          </select>
        </div>
      </motion.div>

      {/* Templates Grid */}
      <AnimatePresence mode="wait">
        {filteredTemplates.length > 0 ? (
          <motion.div
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            {filteredTemplates.map((template, index) => (
              <motion.div
                key={template.id}
                initial={{ opacity: 0, y: 50 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                layout
              >
                <Card hover className="overflow-hidden group">
                  <div className="relative aspect-video bg-gray-700 overflow-hidden">
                    <motion.img
                      src={template.preview}
                      alt={`${template.name} preview`}
                      className="w-full h-full object-cover transition-transform duration-500"
                      whileHover={{ scale: 1.1 }}
                    />
                    
                    {/* Overlay */}
                    <motion.div
                      className="absolute inset-0 bg-black/60 backdrop-blur-sm opacity-0 group-hover:opacity-100 transition-all duration-300 flex items-center justify-center"
                      initial={{ opacity: 0 }}
                      whileHover={{ opacity: 1 }}
                    >
                      <div className="flex space-x-3">
                        <Button
                          variant="secondary"
                          size="sm"
                          onClick={() => handlePreview(template)}
                          icon={Eye}
                        >
                          Preview
                        </Button>
                        <Button
                          variant="gradient"
                          size="sm"
                          onClick={() => handleUseTemplate(template)}
                        >
                          Use Template
                        </Button>
                      </div>
                    </motion.div>

                    {/* Premium Badge */}
                    {template.isPremium && (
                      <motion.div
                        className="absolute top-3 right-3 bg-gradient-to-r from-yellow-500 to-orange-500 text-white px-3 py-1 rounded-full text-xs font-medium flex items-center space-x-1 shadow-lg"
                        initial={{ scale: 0, rotate: -10 }}
                        animate={{ scale: 1, rotate: 0 }}
                        transition={{ delay: 0.3 + index * 0.1 }}
                      >
                        <Zap className="h-3 w-3" />
                        <span>Premium</span>
                      </motion.div>
                    )}

                    {/* Favorite Button */}
                    <motion.button
                      onClick={() => toggleFavorite(template.id)}
                      className="absolute top-3 left-3 p-2 bg-black/50 backdrop-blur-sm rounded-full text-white hover:bg-black/70 transition-all duration-200"
                      whileHover={{ scale: 1.1 }}
                      whileTap={{ scale: 0.9 }}
                    >
                      <Heart
                        className={`h-4 w-4 ${
                          favorites.includes(template.id) || template.isFavorite
                            ? 'fill-red-500 text-red-500'
                            : 'text-white'
                        }`}
                      />
                    </motion.button>
                  </div>
                  
                  <div className="p-6">
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex-1">
                        <h3 className="font-semibold text-white text-lg mb-1 group-hover:text-teal-400 transition-colors">
                          {template.name}
                        </h3>
                        <div className="flex items-center space-x-3 text-sm text-gray-400">
                          <div className="flex items-center space-x-1">
                            <Star className="h-4 w-4 text-yellow-400 fill-current" />
                            <span>{template.rating}</span>
                          </div>
                          <div className="flex items-center space-x-1">
                            <Download className="h-4 w-4" />
                            <span>{template.downloads.toLocaleString()}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex flex-wrap gap-2 mb-4">
                      {template.tags.map((tag) => (
                        <motion.span
                          key={tag}
                          className="px-3 py-1 bg-gray-700/50 text-gray-300 text-xs rounded-full border border-gray-600/30"
                          whileHover={{ scale: 1.05, backgroundColor: 'rgba(20, 184, 166, 0.1)' }}
                        >
                          {tag}
                        </motion.span>
                      ))}
                    </div>
                    
                    <div className="flex space-x-2">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handlePreview(template)}
                        className="flex-1"
                      >
                        Preview
                      </Button>
                      <Button
                        variant={template.isPremium ? "secondary" : "gradient"}
                        size="sm"
                        onClick={() => handleUseTemplate(template)}
                        className="flex-1"
                        disabled={template.isPremium}
                      >
                        {template.isPremium ? 'Premium' : 'Use Template'}
                      </Button>
                    </div>
                  </div>
                </Card>
              </motion.div>
            ))}
          </motion.div>
        ) : (
          <motion.div
            className="text-center py-12"
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
          >
            <div className="text-gray-400 mb-4">
              <Search className="h-16 w-16 mx-auto mb-4 opacity-50" />
            </div>
            <h3 className="text-lg font-medium text-white mb-2">No templates found</h3>
            <p className="text-gray-400">Try adjusting your search or filter criteria</p>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default Templates;
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
});
</file>

<file path="src/components/Home/InteractiveHeroDemo.tsx">
import React, { useEffect, useRef, useState, CSSProperties, ReactNode } from 'react';
import { motion, AnimatePresence, useMotionValue } from 'framer-motion';
import { Type, Layout, Image, Zap, CheckCircle } from 'lucide-react';

// Pointer Component (Fixed)
import type { HTMLMotionProps } from 'framer-motion';

interface PointerProps extends Omit<HTMLMotionProps<"div">, "style"> {
  className?: string;
  style?: CSSProperties;
  children?: ReactNode;
}

function Pointer({ className, style, children, ...props }: PointerProps) {
  const x = useMotionValue(0);
  const y = useMotionValue(0);
  const [isActive, setIsActive] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (typeof window !== "undefined" && containerRef.current) {
      const parentElement = containerRef.current.parentElement;

      if (parentElement) {
        parentElement.style.cursor = "none";

        const handleMouseMove = (e: { clientX: number; clientY: number; }) => {
          // Get the bounding rect of the parent to calculate relative position
          const rect = parentElement.getBoundingClientRect();
          x.set(e.clientX - rect.left);
          y.set(e.clientY - rect.top);
        };

        const handleMouseEnter = () => {
          setIsActive(true);
        };

        const handleMouseLeave = () => {
          setIsActive(false);
        };

        parentElement.addEventListener("mousemove", handleMouseMove);
        parentElement.addEventListener("mouseenter", handleMouseEnter);
        parentElement.addEventListener("mouseleave", handleMouseLeave);

        return () => {
          parentElement.style.cursor = "";
          parentElement.removeEventListener("mousemove", handleMouseMove);
          parentElement.removeEventListener("mouseenter", handleMouseEnter);
          parentElement.removeEventListener("mouseleave", handleMouseLeave);
        };
      }
    }
  }, [x, y]);

  return (
    <>
      <div ref={containerRef} className="absolute inset-0 pointer-events-none" />
      <AnimatePresence>
        {isActive && (
          <motion.div
            className="absolute pointer-events-none z-50 transform -translate-x-1/2 -translate-y-1/2"
            style={{
              top: y,
              left: x,
              ...style,
            }}
            initial={{
              scale: 0,
              opacity: 0,
            }}
            animate={{
              scale: 1,
              opacity: 1,
            }}
            exit={{
              scale: 0,
              opacity: 0,
            }}
            transition={{
              type: "spring",
              stiffness: 400,
              damping: 30,
            }}
            {...props}
          >
            {children || (
              <svg
                stroke="currentColor"
                fill="currentColor"
                strokeWidth="1"
                viewBox="0 0 16 16"
                height="24"
                width="24"
                xmlns="http://www.w3.org/2000/svg"
                className={`rotate-[-70deg] stroke-white text-blue-500 drop-shadow-lg ${className || ''}`}
              >
                <path d="M14.082 2.182a.5.5 0 0 1 .103.557L8.528 15.467a.5.5 0 0 1-.917-.007L5.57 10.694.803 8.652a.5.5 0 0 1-.006-.916l12.728-5.657a.5.5 0 0 1 .556.103z" />
              </svg>
            )}
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
}

// Define steps with more descriptive icons and placeholder images
const steps = [
  { text: 'Describe your business...', icon: Type, image: 'https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=800&h=400&fit=crop' },
  { text: 'AI generates a unique layout...', icon: Layout, image: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800&h=400&fit=crop' },
  { text: 'AI curates stunning visuals...', icon: Image, image: 'https://images.unsplash.com/photo-1522542550221-31fd19575a2d?w=800&h=400&fit=crop' },
  { text: 'Optimizing for performance...', icon: Zap, image: 'https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=800&h=400&fit=crop' },
  { text: 'Your website is ready!', icon: CheckCircle, image: 'https://images.unsplash.com/photo-1556075798-4825dfaaf498?w=800&h=400&fit=crop' },
];

const InteractiveHeroDemo = () => {
  const [currentStep, setCurrentStep] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentStep((prev) => (prev + 1) % steps.length);
    }, 2500);
    return () => clearInterval(interval);
  }, []);

  const currentStepData = steps[currentStep];

  return (
    <motion.div 
      className="bg-gray-900/50 border border-gray-800 rounded-2xl p-4 h-[500px] shadow-2xl shadow-indigo-500/10 backdrop-blur-sm relative overflow-hidden"
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.7, ease: 'easeOut' }}
    >
      {/* Browser Header */}
      <div className="flex items-center space-x-1.5 mb-4">
        <div className="w-3 h-3 rounded-full bg-red-500"></div>
        <div className="w-3 h-3 rounded-full bg-yellow-500"></div>
        <div className="w-3 h-3 rounded-full bg-green-500"></div>
        <div className="ml-2 bg-gray-800/60 text-xs text-gray-400 px-3 py-1 rounded-md border border-gray-700">your-business.com</div>
      </div>

      {/* Status Bar */}
      <div className="bg-gray-800/50 rounded-lg p-3 flex items-center space-x-3 mb-4 border border-gray-700/80">
        <motion.div
          key={currentStep}
          initial={{ rotate: -45, scale: 0.8, opacity: 0 }}
          animate={{ rotate: 0, scale: 1, opacity: 1 }}
        >
          {React.createElement(currentStepData.icon, {
            className: "h-5 w-5 text-indigo-400 flex-shrink-0"
          })}
        </motion.div>
        <div className="text-sm text-gray-300 w-full h-5 relative overflow-hidden">
          <AnimatePresence>
            <motion.span
              key={currentStep}
              className="absolute inset-0"
              initial={{ y: "100%", opacity: 0 }}
              animate={{ y: "0%", opacity: 1 }}
              exit={{ y: "-100%", opacity: 0 }}
              transition={{ type: 'spring', stiffness: 200, damping: 25 }}
            >
              {currentStepData.text}
            </motion.span>
          </AnimatePresence>
        </div>
        <div className="text-xs font-mono text-gray-500">
          {currentStep + 1}/{steps.length}
        </div>
      </div>

      {/* Main Preview Area */}
      <div className="bg-black rounded-lg overflow-hidden h-[330px] relative border border-gray-700">
        <AnimatePresence>
          <motion.img 
            key={currentStep}
            src={currentStepData.image}
            alt="Website preview"
            className="absolute inset-0 w-full h-full object-cover"
            initial={{ opacity: 0, scale: 1.05 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.6, ease: 'easeInOut' }}
          />
        </AnimatePresence>
          
        {/* Subtle overlay for professional look */}
        <div className="absolute inset-0 bg-gradient-to-t from-black/30 via-transparent to-transparent"></div>
        
        {/* Progress Bar (at the bottom of the image) */}
        <div className="absolute bottom-0 left-0 right-0 h-1 bg-gray-700/50">
           <motion.div
             className="h-full bg-gradient-to-r from-indigo-500 to-blue-500"
             initial={{ width: "0%" }}
             animate={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}
             transition={{ duration: 0.5, ease: 'easeOut' }}
           />
        </div>
        
        {/* Completion badge */}
        {currentStep === steps.length - 1 && (
          <motion.div
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.5, type: "spring" }}
            className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-black/50 backdrop-blur-md text-white px-6 py-3 rounded-lg text-lg font-medium flex items-center space-x-2 border border-green-500/50"
          >
            <CheckCircle className="h-6 w-6 text-green-400" />
            <span>Website Ready!</span>
          </motion.div>
        )}
      </div>
      
      {/* Custom Pointer Component */}
      <Pointer className="fill-blue-500" />
    </motion.div>
  );
};

export default InteractiveHeroDemo;
</file>

<file path="src/components/UI/Card.tsx">
import React from 'react';
import { motion } from 'framer-motion';

interface CardProps {
  children: React.ReactNode;
  className?: string;
  delay?: number;
}

const Card: React.FC<CardProps> = ({ children, className = '', delay = 0 }) => {
  return (
    <motion.div
      className={`bg-card text-card-foreground border border-border rounded-lg shadow-sm ${className}`}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay }}
    >
      {children}
    </motion.div>
  );
};

export default Card;
</file>

<file path="src/components/UI/Modal.tsx">
import React, { useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X } from 'lucide-react';
import Button from './Button';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  children: React.ReactNode;
  size?: 'sm' | 'md' | 'lg' | 'xl';
}

const Modal: React.FC<ModalProps> = ({ isOpen, onClose, title, children, size = 'md' }) => {
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }
    
    return () => {
      document.body.style.overflow = 'unset';
    };
  }, [isOpen]);

  const sizeClasses = {
    sm: 'max-w-md',
    md: 'max-w-lg',
    lg: 'max-w-2xl',
    xl: 'max-w-4xl',
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <motion.div
              className="fixed inset-0 bg-black/80 backdrop-blur-sm"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              onClick={onClose}
              aria-hidden="true"
            />

            <motion.div
              className={`inline-block w-full ${sizeClasses[size]} p-6 my-8 overflow-hidden text-left align-middle bg-gray-800/95 backdrop-blur-xl shadow-2xl rounded-2xl border border-gray-700/50`}
              initial={{ opacity: 0, scale: 0.9, y: 20 }}
              animate={{ opacity: 1, scale: 1, y: 0 }}
              exit={{ opacity: 0, scale: 0.9, y: 20 }}
              transition={{ type: "spring", damping: 25, stiffness: 300 }}
            >
              <div className="flex items-center justify-between mb-6">
                <motion.h3
                  className="text-xl font-semibold text-white"
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.1 }}
                >
                  {title}
                </motion.h3>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={onClose}
                  icon={X}
                  className="!p-2 hover:bg-gray-700/50"
                  aria-label="Close modal" children={undefined}                />
              </div>
              
              <motion.div
                className="text-gray-300"
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.2 }}
              >
                {children}
              </motion.div>
            </motion.div>
          </div>
        </div>
      )}
    </AnimatePresence>
  );
};

export default Modal;
</file>

<file path="package.json">
{
  "name": "vite-react-typescript-starter",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "clsx": "^2.1.1",
    "framer-motion": "^10.18.0",
    "lucide-react": "^0.344.0",
    "motion": "^12.18.1",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.8.1",
    "tailwind-merge": "^3.3.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.3.0",
    "vite": "^5.4.2"
  }
}
</file>

<file path="src/App.tsx">
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Layout from './components/Layout/Layout';
import Home from './pages/Home';
import Dashboard from './pages/Dashboard';
import Templates from './pages/Templates';
import Builder from './pages/Builder';
import { ToastProvider } from './components/UI/Toast';
import { ThemeProvider } from './contexts/ThemeContext';
import { WebsiteProvider } from './contexts/WebsiteContext'; 

function App() {
  return (
       <ThemeProvider>
        <WebsiteProvider>

    <ToastProvider>
      <Router>
        <div className="min-h-screen bg-gray-900 text-gray-100">
          <Routes>
            {/* Route for the homepage, which does not use the main layout */}
            <Route path="/" element={<Home />} />
            
            {/* Routes for the rest of the app, which use the main layout */}
            <Route
              path="/*"
              element={
                <Layout>
                  <Routes>
                    <Route path="/dashboard" element={<Dashboard />} />
                    <Route path="/templates" element={<Templates />} />
                    <Route path="/builder" element={<Builder />} />
                    {/* Add other dashboard-related routes here */}
                  </Routes>
                </Layout>
              }
            />
          </Routes>
        </div>
      </Router>
    </ToastProvider>
    </WebsiteProvider>
    </ThemeProvider>
  );
}

export default App;
</file>

<file path="src/components/Layout/Layout.tsx">
import React, { useState } from 'react';
import { useLocation } from 'react-router-dom';
import Header from './Header';
import Sidebar from './Sidebar';

interface LayoutProps {
  children: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const location = useLocation();
  
  const showSidebar = location.pathname !== '/';

  return (
    <div className={`flex h-screen bg-background ${showSidebar ? 'lg:pl-64' : ''}`}>
      {showSidebar && (
        <Sidebar 
          isOpen={sidebarOpen} 
          onClose={() => setSidebarOpen(false)} 
        />
      )}
      
      <div className="flex-1 flex flex-col overflow-hidden">
        <Header 
          onMenuClick={() => setSidebarOpen(true)} 
          showMenuButton={showSidebar}
        />
        
        <main className="flex-1 overflow-x-hidden overflow-y-auto">
          {children}
        </main>

        {/* <Footer />  */}
      </div>
    </div>
  );
};

export default Layout;
</file>

<file path="src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
 
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
 
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
 
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
 
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
 
    --radius: 0.75rem;
  }
 
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
 
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
 
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
 
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
 
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
 
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
 
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}

@layer base {
  body {
    @apply bg-background text-foreground;
  }
}
.gradient-text {
  background: linear-gradient(to right, #a855f7, #6366f1, #38bdf8);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}
</file>

<file path="src/pages/Dashboard.tsx">
// src/pages/Dashboard.tsx

import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Plus, Layout, Globe, AlertTriangle } from 'lucide-react';
import Button from '../components/UI/Button';
import Card from '../components/UI/Card';
import Modal from '../components/UI/Modal';
import { useToast } from '../components/UI/Toast';
import { useWebsites, Website } from '../contexts/WebsiteContext';
import { useNavigate } from 'react-router-dom';

import OverviewStats from '../components/Dashboard/OverviewStats';
import WebsiteCard from '../components/Dashboard/WebsiteCard';

const Dashboard: React.FC = () => {
  const { showToast } = useToast();
  const { websites, deleteWebsite } = useWebsites();
  const navigate = useNavigate();

  const [siteToDelete, setSiteToDelete] = useState<Website | null>(null);

  const handleCreateWebsite = () => {
    showToast('info', 'Redirecting to the Launch Your Business Website...');
    setTimeout(() => navigate('/builder'), 1000);
  };

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const handleDeleteRequest = (id: string, name: string) => {
      const site = websites.find(s => s.id === id);
      if (site) {
          setSiteToDelete(site);
      }
  };

  const confirmDelete = () => {
    if (siteToDelete) {
      deleteWebsite(siteToDelete.id);
      showToast('success', `Website "${siteToDelete.name}" has been deleted.`);
      setSiteToDelete(null);
    }
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <motion.div
        className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        <div>
          <h1 className="text-3xl font-bold text-white">Dashboard</h1>
          <p className="text-gray-400 mt-1">Welcome back, here's your website overview.</p>
        </div>
        <Button variant="gradient" icon={Plus} onClick={handleCreateWebsite}>
          Create New Site
        </Button>
      </motion.div>

      <div className="space-y-8">
        <OverviewStats websites={websites} />

        <div>
            <h2 className="text-xl font-semibold text-white mb-4">Your Websites</h2>
            {websites.length === 0 ? (
                <Card className="p-12 text-center">
                    <Globe className="h-16 w-16 text-gray-600 mx-auto mb-4" />
                    <h3 className="text-lg font-medium text-white mb-2">Your space is empty!</h3>
                    <p className="text-gray-400 mb-6">Create your first website to get started.</p>
                    <Button onClick={handleCreateWebsite} variant="primary">
                        Start with AI <Layout className="h-4 w-4 ml-2"/>
                    </Button>
                </Card>
            ) : (
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <AnimatePresence>
                        {websites.map((website) => (
                            <WebsiteCard key={website.id} website={website} onDelete={handleDeleteRequest} />
                        ))}
                    </AnimatePresence>
                </div>
            )}
        </div>
      </div>

      {/* Delete Confirmation Modal */}
      <Modal
        isOpen={!!siteToDelete}
        onClose={() => setSiteToDelete(null)}
        title="Confirm Deletion"
        size="sm"
      >
        <div className="text-center">
          <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-500/10">
            <AlertTriangle className="h-6 w-6 text-red-500" />
          </div>
          <p className="text-gray-300 mt-4">
            Are you sure you want to delete the website{' '}
            <strong className="text-white">"{siteToDelete?.name}"</strong>?
          </p>
          <p className="text-sm text-muted-foreground mt-2">This action cannot be undone.</p>
          <div className="mt-6 flex justify-center space-x-4">
            <Button variant="secondary" onClick={() => setSiteToDelete(null)}>
              Cancel
            </Button>
            <Button variant="danger" onClick={confirmDelete}>
              Delete
            </Button>
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default Dashboard;
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  darkMode: 'class', // Enable class-based dark mode
  theme: {
    extend: { 
      animation: { // ADD THIS
        "marquee-horizontal": "marquee-horizontal var(--duration) linear infinite",
        "marquee-vertical": "marquee-vertical var(--duration) linear infinite",
      },
      keyframes: { // ADD THIS
        "marquee-horizontal": {
          from: { transform: "translateX(0)" },
          to: { transform: "translateX(calc(-100% - var(--gap)))" },
        },
        "marquee-vertical": {
          from: { transform: "translateY(0)" },
          to: { transform: "translateY(calc(-100% - var(--gap)))" },
        },
      },
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
      },
      borderRadius: {
        lg: `var(--radius)`,
        md: `calc(var(--radius) - 2px)`,
        sm: 'calc(var(--radius) - 4px)',
      },
    },
  },
  plugins: [],
};
</file>

<file path="src/pages/Home.tsx">
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { Layout, Globe, Zap, Sparkles, Award, Users, TrendingUp } from 'lucide-react';
import Button from '../components/UI/Button';
import { useScroll } from 'framer-motion';
import { useRef } from 'react';
import { BoxReveal } from '../components/magicui/box-reveal';

import Logo from '../components/UI/Logo';
import { useToast } from '../components/UI/Toast';
import Footer from '../components/Layout/Footer';
import InteractiveHeroDemo from '../components/Home/InteractiveHeroDemo';

import { BentoCard, BentoGrid } from '../components/magicui/bento-grid';
import { BuilderAnimation, SparklesAnimation, ChartAnimation } from '../components/Home/BentoFeatures';
import { BarChart3 } from 'lucide-react';
import { HyperText } from '../components/magicui/hypertext';

import UniqueCTA from '../components/Home/CTA';
import { Marquee } from '../components/magicui/marquee';
import ReviewCard from '../components/Home/ReviewCard';

// A new, dedicated header for the marketing page
const MarketingHeader = () => {
  const navigate = useNavigate();
  return (
    <header className="absolute top-0 left-0 right-0 z-20 py-6 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto flex justify-between items-center">
        <div className="flex items-center space-x-8">
          <Logo />
          <nav className="hidden md:flex items-center space-x-6 text-sm">
            <a href="#" className="text-gray-300 hover:text-white transition-colors">Product</a>
            <a href="#" className="text-gray-300 hover:text-white transition-colors">Tools</a>
            <a href="#" className="text-gray-300 hover:text-white transition-colors">Pricing</a>
            <div className="flex items-center space-x-2">
              <a href="#" className="text-gray-300 hover:text-white transition-colors">API</a>
              <span className="bg-indigo-500 text-white text-xs font-semibold px-2 py-0.5 rounded-md">New</span>
            </div>
          </nav>
        </div>
        <div className="flex items-center space-x-4">
          <Button variant="ghost" size="sm" onClick={() => navigate('/dashboard')}>Log in</Button>
          <Button variant="primary" size="sm" className="!bg-white !text-black hover:!bg-gray-200" onClick={() => navigate('/dashboard')}>Get Started for Free</Button>
        </div>
      </div>
    </header>
  );
};

// Data for the showcase grid on the right
// const showcaseItems = {
//   main: { image: 'https://images.pexels.com/photos/1036623/pexels-photo-1036623.jpeg?auto=compress&cs=tinysrgb&w=600', title: 'Look good, feel amazing', cta: 'SHOP NOW' },
//   sideTop: { image: 'https://images.pexels.com/photos/1287145/pexels-photo-1287145.jpeg?auto=compress&cs=tinysrgb&w=600' },
//   bottom: { image: 'https://images.pexels.com/photos/994523/pexels-photo-994523.jpeg?auto=compress&cs=tinysrgb&w=600' }
// };


const bentoFeatures = [
  {
    Icon: Layout,
    name: "Beautiful, Professional Templates",
    description: "Choose from dozens of mobile-ready templates designed for restaurants, salons, retail, and more. Customize in minutes.",
    href: "#",
    cta: "Browse Templates",
    className: "md:col-span-2",
    background: <BuilderAnimation />,
  },
  {
    Icon: Sparkles,
    name: "AI-Powered Assistants",
    description: "Let our AI draft email replies and analyze customer feedback, saving you time so you can focus on your business.",
    href: "#",
    cta: "Discover AI Tools",
    className: "md:col-span-1",
    background: <SparklesAnimation />,
  },
  {
    Icon: BarChart3,
    name: "Your Business Dashboard",
    description: "Track your success with a built-in dashboard. Monitor visits, growth, and engagement.",
    href: "#",
    cta: "View Dashboard",
    className: "md:col-span-1",
    background: <ChartAnimation />,
  },
  {
    Icon: Zap,
    name: "Powerful E-commerce, Built-In",
    description: "Sell products, manage inventory, offer discount codes, and integrate with shipping providers. Everything you need to start selling online.",
    href: "#",
    cta: "Explore E-commerce Features",
    className: "md:col-span-2",
    background: <motion.div className="absolute inset-0 bg-gradient-to-br from-yellow-500/10 via-transparent to-transparent" />,
  },
];

const reviews = [
  {
    name: "Shannon Weitzel",
    username: "WebCraft User",
    img: "https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?q=80&w=200",
    body: "I actually decided to not go with Shopify because it was just too daunting... everything I needed help with was addressed pretty clearly.",
  },
  {
    name: "Marcus Holloway",
    username: "Tech Entrepreneur",
    img: "https://images.unsplash.com/photo-1568602471122-7832951cc4c5?q=80&w=200",
    body: "The AI builder is a game-changer. What used to take me days of coding now takes minutes. The platform is intuitive, fast, and the results are incredibly professional.",
  },
  {
    name: "Elena Rodriguez",
    username: "Freelance Designer",
    img: "https://images.unsplash.com/photo-1580489944761-15a19d654956?q=80&w=200",
    body: "As a designer, I'm picky about aesthetics. WebCraft's AI generates such beautiful, well-balanced layouts that I can confidently use them for my clients.",
  },
   {
    name: "James Anderson",
    username: "Small Business Owner",
    img: "https://images.unsplash.com/photo-1557862921-37829c790f19?q=80&w=200",
    body: "The uptime is incredible, and my site is faster than ever. The hosting solution included is top-notch and requires zero configuration from my end.",
  },
];

const Home: React.FC = () => {
  const ref = useRef(null);
  useScroll({
    target: ref,
    offset: ["start end", "end start"]
  });
  const navigate = useNavigate();
  const { showToast } = useToast();
   
  const handleGenerateWebsite = () => {
    showToast('success', 'Redirecting to the Launch Your Business Website!');
    setTimeout(() => navigate('/builder'), 1500);
  };

   


  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { staggerChildren: 0.1 } }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { type: 'spring', stiffness: 100 } }
  };


  const stats = [
    { icon: Users, value: '50K+', label: 'Happy Customers' },
    { icon: Globe, value: '100K+', label: 'Websites Created' },
    { icon: TrendingUp, value: '99.9%', label: 'Uptime Guarantee' },
    { icon: Award, value: '4.9/5', label: 'User Rating' },
  ];

  return (
    <div className="min-h-screen bg-black text-white overflow-hidden relative">
      <MarketingHeader />

      {/* Hero Section */}
      <section className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-40 pb-20 lg:pt-48 lg:pb-28">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-16 items-center">
          {/* Left Side: Hero Text */}
          <motion.div className="text-center lg:text-left" variants={containerVariants} initial="hidden" animate="visible">
            <motion.p variants={itemVariants} className="text-lg text-gray-400">From vision to growing business</motion.p>
            <motion.h1 variants={itemVariants} className="mt-4 text-4xl sm:text-5xl lg:text-6xl font-extrabold text-white tracking-tight">The All-In-One Platform to Run Your Business Online.</motion.h1>
            <motion.p variants={itemVariants} className="mt-6 text-lg text-gray-300 max-w-xl mx-auto lg:mx-0">From online ordering and e-commerce to automated marketing and AI assistants, get all the tools you need to succeed, no technical skills required.</motion.p>
            <motion.div variants={itemVariants} className="mt-8">
              <Button size="lg" onClick={handleGenerateWebsite} className="!bg-indigo-600 hover:!bg-indigo-500 !text-white !text-base !font-semibold !px-8 !py-4">Get Started For Free</Button>
            </motion.div>
          </motion.div>

          {/* Right Side: Showcase Grid */}
          {/* <motion.div className="relative h-[500px]" initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} transition={{ duration: 0.7, delay: 0.3, ease: 'easeOut' }}>
            <div className="absolute inset-0 grid grid-cols-5 grid-rows-3 gap-4">
              <motion.div className="col-span-2 row-span-2 rounded-2xl bg-gray-900/50 border border-gray-800 overflow-hidden" whileHover={{ scale: 1.05, zIndex: 10 }}><img src={showcaseItems.sideTop.image} alt="Side Top" className="w-full h-full object-cover" /></motion.div>
              <motion.div className="col-span-3 row-span-2 rounded-2xl bg-gray-900/50 border border-gray-800 overflow-hidden relative" whileHover={{ scale: 1.05, zIndex: 10 }}><img src={showcaseItems.main.image} alt="Main" className="w-full h-full object-cover" /><div className="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent flex flex-col justify-end p-4"><h3 className="text-white font-bold text-lg">{showcaseItems.main.title}</h3><button className="mt-2 text-xs font-bold bg-white/90 text-black px-4 py-2 rounded-md self-start">{showcaseItems.main.cta}</button></div></motion.div>
              <div className="col-span-2 row-span-1 flex flex-col gap-4"><motion.div className="flex-1 rounded-2xl bg-gray-900/50 border border-gray-800 p-4" whileHover={{ scale: 1.05, zIndex: 10 }}><p className="text-xs text-gray-400">yourdomain.org</p><div className="my-1.5 px-3 py-1.5 bg-black rounded-lg border border-gray-600 text-white text-xs flex items-center gap-2"><Globe className="w-4 h-4" /> yourdomain.com</div><p className="text-xs text-gray-400">studiovibes.org</p></motion.div><motion.div className="flex-1 rounded-2xl bg-green-500/80 flex items-center justify-center" whileHover={{ scale: 1.05, zIndex: 10 }}><ShieldCheck className="w-10 h-10 text-white" /></motion.div></div>
              <motion.div className="col-span-3 row-span-1 rounded-2xl bg-gray-900/50 border border-gray-800 overflow-hidden" whileHover={{ scale: 1.05, zIndex: 10 }}><img src={showcaseItems.bottom.image} alt="Bottom" className="w-full h-full object-cover" /></motion.div>
            </div>
            <motion.div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-24 h-24" animate={{ y: ["-5%", "5%"] }} transition={{ duration: 2, repeat: Infinity, repeatType: 'reverse', ease: 'easeInOut' }} style={{ background: 'radial-gradient(circle, rgba(99,102,241,0.5) 0%, rgba(79,70,229,0) 70%)' }}><div className="w-full h-full rounded-full bg-gradient-to-br from-indigo-500 to-blue-500 flex items-center justify-center shadow-2xl shadow-indigo-500/50"><Layout className="w-10 h-10 text-white" /></div></motion.div>
          </motion.div> */}

          <InteractiveHeroDemo/>
        </div>
      </section>



  <section className="py-20 sm:py-28 border-y border-gray-800">
  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
      {stats.map((stat, index) => (
        <motion.div
          key={stat.label}
          className="group relative text-center bg-black border border-gray-800 p-8 rounded-2xl overflow-hidden transition-all duration-300 hover:border-gray-700 hover:shadow-2xl hover:shadow-indigo-500/10"
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ delay: index * 0.1, duration: 0.5 }}
          viewport={{ once: true }}
        >
          {/* Glowing border effect on hover */}
          <div className="absolute inset-0 bg-gradient-to-r from-indigo-500/30 to-teal-500/30 opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-2xl"></div>
          
          {/* Subtle icon in the background, more ethereal */}
          <stat.icon className="absolute -top-6 -right-6 w-28 h-28 text-gray-900 transition-transform duration-500 group-hover:rotate-12 group-hover:scale-110" />
          
          <div className="relative z-10">
            <HyperText
              className="text-4xl sm:text-5xl font-bold text-white font-mono tracking-tighter"
              delay={index * 200}
            >
              {stat.value}
            </HyperText>
            <p className="mt-2 text-sm text-gray-400">{stat.label}</p>
          </div>
          
          {/* Soft black gradient overlay for depth */}
          <div className="absolute inset-0 bg-gradient-to-t from-black/50 via-black/10 to-transparent"></div>
        </motion.div>
      ))}
    </div>
  </div>
</section>
      
      {/* "How It Works" Section */}

      <section className="py-20 sm:py-28">
  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div className="max-w-4xl mx-auto text-center">
        <motion.h2 initial={{ opacity: 0, y: 20 }} whileInView={{ opacity: 1, y: 0 }} viewport={{ once: true }} className="text-3xl sm:text-4xl font-bold text-white">More than a website builder.</motion.h2>
        <motion.p initial={{ opacity: 0, y: 20 }} whileInView={{ opacity: 1, y: 0 }} viewport={{ once: true }} transition={{ delay: 0.1 }} className="mt-4 text-lg text-gray-400">An intelligent platform designed to handle everything from concept to customer.</motion.p>
    </div>
    <div className="mt-16">
        <BentoGrid>
            {bentoFeatures.map((feature, idx) => (
                <BentoCard key={idx} {...feature} />
            ))}
        </BentoGrid>
    </div>
  </div>
</section>

      


            {/* NEW: API Section */}

            <section className="py-20 sm:py-28 bg-black">
  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-x-12 gap-y-16 items-center">
      
      {/* Left Column: Heading & Text */}
      <div className="lg:max-w-lg">
        <BoxReveal boxColor={"#a855f7"} duration={0.5}>
          <p className="text-3xl sm:text-4xl font-bold">
            Loved by businesses worldwide<span className="text-indigo-500">.</span>
          </p>
        </BoxReveal>
        <BoxReveal boxColor={"#38bdf8"} duration={0.5}>
          <p className="mt-4 text-lg text-gray-400">
            Our platform is trusted by entrepreneurs and designers to bring their visions to life, faster than ever before. We're not just a tool; we're a partner in your success.
          </p>
        </BoxReveal>
        <BoxReveal boxColor={"#34d399"} duration={0.5}>
            <Button size="lg" onClick={() => navigate('/dashboard')} className="mt-8 !bg-indigo-600 hover:!bg-indigo-500 !text-white">
                Start Your Free Trial
            </Button>
        </BoxReveal>
      </div>
      
      {/* Right Column: Scrolling Reviews */}
      <div className="relative h-[450px] overflow-hidden [mask-image:linear-gradient(to_bottom,transparent_0%,black_15%,black_85%,transparent_100%)]">
          <Marquee pauseOnHover vertical className="[--duration:60s]">
            {reviews.map((review) => (
              <ReviewCard key={review.username} {...review} />
            ))}
          </Marquee>
      </div>

    </div>
  </div>
</section>
        
      {/* CTA Section */}
      <UniqueCTA/>
     <Footer/>
    </div>
  );
};

export default Home;
</file>

</files>
